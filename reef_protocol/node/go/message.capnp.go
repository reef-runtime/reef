// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignId      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
	MessageToNodeKind_abortJob      MessageToNodeKind = 5
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignId:
		return "assignId"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"
	case MessageToNodeKind_abortJob:
		return "abortJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignId":
		return MessageToNodeKind_assignId
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob
	case "abortJob":
		return MessageToNodeKind_abortJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty    MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignId MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob MessageToNode_body_Which = 2
	MessageToNode_body_Which_abortJob MessageToNode_body_Which = 3
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIdstartJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignId:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_abortJob:
		return s[21:29]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignId() (AssignIdMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignId")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIdMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignId() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignId(v AssignIdMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignId sets the assignId field to a newly
// allocated AssignIdMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignId() (AssignIdMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIdMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIdMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobStartMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStartMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobStartMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobStartMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobStartMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobStartMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobStartMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobKillMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobKillMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobKillMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobKillMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobKillMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobKillMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobKillMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignId() AssignIdMessage_Future {
	return AssignIdMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobStartMessage_Future {
	return JobStartMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobKillMessage_Future {
	return JobKillMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIdMessage capnp.Struct

// AssignIdMessage_TypeID is the unique identifier for the type AssignIdMessage.
const AssignIdMessage_TypeID = 0xb00291a156771b6b

func NewAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func NewRootAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func ReadRootAssignIdMessage(msg *capnp.Message) (AssignIdMessage, error) {
	root, err := msg.Root()
	return AssignIdMessage(root.Struct()), err
}

func (s AssignIdMessage) String() string {
	str, _ := text.Marshal(0xb00291a156771b6b, capnp.Struct(s))
	return str
}

func (s AssignIdMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIdMessage) DecodeFromPtr(p capnp.Ptr) AssignIdMessage {
	return AssignIdMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIdMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIdMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIdMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIdMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIdMessage) NodeId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIdMessage) HasNodeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIdMessage) SetNodeId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIdMessage_List is a list of AssignIdMessage.
type AssignIdMessage_List = capnp.StructList[AssignIdMessage]

// NewAssignIdMessage creates a new list of AssignIdMessage.
func NewAssignIdMessage_List(s *capnp.Segment, sz int32) (AssignIdMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIdMessage](l), err
}

// AssignIdMessage_Future is a wrapper for a AssignIdMessage promised by a client call.
type AssignIdMessage_Future struct{ *capnp.Future }

func (f AssignIdMessage_Future) Struct() (AssignIdMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIdMessage(p.Struct()), err
}

type JobStartMessage capnp.Struct

// JobStartMessage_TypeID is the unique identifier for the type JobStartMessage.
const JobStartMessage_TypeID = 0xc1654f845d3e3fd8

func NewJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return JobStartMessage(st), err
}

func NewRootJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return JobStartMessage(st), err
}

func ReadRootJobStartMessage(msg *capnp.Message) (JobStartMessage, error) {
	root, err := msg.Root()
	return JobStartMessage(root.Struct()), err
}

func (s JobStartMessage) String() string {
	str, _ := text.Marshal(0xc1654f845d3e3fd8, capnp.Struct(s))
	return str
}

func (s JobStartMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartMessage) DecodeFromPtr(p capnp.Ptr) JobStartMessage {
	return JobStartMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobStartMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStartMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s JobStartMessage) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStartMessage) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStartMessage) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s JobStartMessage) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// JobStartMessage_List is a list of JobStartMessage.
type JobStartMessage_List = capnp.StructList[JobStartMessage]

// NewJobStartMessage creates a new list of JobStartMessage.
func NewJobStartMessage_List(s *capnp.Segment, sz int32) (JobStartMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[JobStartMessage](l), err
}

// JobStartMessage_Future is a wrapper for a JobStartMessage promised by a client call.
type JobStartMessage_Future struct{ *capnp.Future }

func (f JobStartMessage_Future) Struct() (JobStartMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartMessage(p.Struct()), err
}

type JobKillMessage capnp.Struct

// JobKillMessage_TypeID is the unique identifier for the type JobKillMessage.
const JobKillMessage_TypeID = 0xdd67101174f73350

func NewJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func NewRootJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func ReadRootJobKillMessage(msg *capnp.Message) (JobKillMessage, error) {
	root, err := msg.Root()
	return JobKillMessage(root.Struct()), err
}

func (s JobKillMessage) String() string {
	str, _ := text.Marshal(0xdd67101174f73350, capnp.Struct(s))
	return str
}

func (s JobKillMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobKillMessage) DecodeFromPtr(p capnp.Ptr) JobKillMessage {
	return JobKillMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobKillMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobKillMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobKillMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobKillMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobKillMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobKillMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobKillMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobKillMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobKillMessage_List is a list of JobKillMessage.
type JobKillMessage_List = capnp.StructList[JobKillMessage]

// NewJobKillMessage creates a new list of JobKillMessage.
func NewJobKillMessage_List(s *capnp.Segment, sz int32) (JobKillMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobKillMessage](l), err
}

// JobKillMessage_Future is a wrapper for a JobKillMessage promised by a client call.
type JobKillMessage_Future struct{ *capnp.Future }

func (f JobKillMessage_Future) Struct() (JobKillMessage, error) {
	p, err := f.Future.Ptr()
	return JobKillMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
	MessageFromNodeKind_jobResult    MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"
	case MessageFromNodeKind_jobResult:
		return "jobResult"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync
	case "jobResult":
		return MessageFromNodeKind_jobResult

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobResult    MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSyncjobResult"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]
	case MessageFromNode_body_Which_jobResult:
		return s[17:26]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobResult() (JobResult, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobResult")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResult(p.Struct()), err
}

func (s MessageFromNode_body) HasJobResult() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobResult(v JobResult) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobResult sets the jobResult field to a newly
// allocated JobResult struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobResult() (JobResult, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobResult(capnp.Struct(s).Segment())
	if err != nil {
		return JobResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobResult() JobResult_Future {
	return JobResult_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

type ResultContentType uint16

// ResultContentType_TypeID is the unique identifier for the type ResultContentType.
const ResultContentType_TypeID = 0xcb3158a325d2d5bb

// Values of ResultContentType.
const (
	ResultContentType_int64       ResultContentType = 0
	ResultContentType_bytes       ResultContentType = 1
	ResultContentType_stringPlain ResultContentType = 2
	ResultContentType_stringJSON  ResultContentType = 3
)

// String returns the enum's constant name.
func (c ResultContentType) String() string {
	switch c {
	case ResultContentType_int64:
		return "int64"
	case ResultContentType_bytes:
		return "bytes"
	case ResultContentType_stringPlain:
		return "stringPlain"
	case ResultContentType_stringJSON:
		return "stringJSON"

	default:
		return ""
	}
}

// ResultContentTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultContentTypeFromString(c string) ResultContentType {
	switch c {
	case "int64":
		return ResultContentType_int64
	case "bytes":
		return ResultContentType_bytes
	case "stringPlain":
		return ResultContentType_stringPlain
	case "stringJSON":
		return ResultContentType_stringJSON

	default:
		return 0
	}
}

type ResultContentType_List = capnp.EnumList[ResultContentType]

func NewResultContentType_List(s *capnp.Segment, sz int32) (ResultContentType_List, error) {
	return capnp.NewEnumList[ResultContentType](s, sz)
}

type JobResult capnp.Struct

// JobResult_TypeID is the unique identifier for the type JobResult.
const JobResult_TypeID = 0x89d5e64a8e7e9034

func NewJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func NewRootJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func ReadRootJobResult(msg *capnp.Message) (JobResult, error) {
	root, err := msg.Root()
	return JobResult(root.Struct()), err
}

func (s JobResult) String() string {
	str, _ := text.Marshal(0x89d5e64a8e7e9034, capnp.Struct(s))
	return str
}

func (s JobResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResult) DecodeFromPtr(p capnp.Ptr) JobResult {
	return JobResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResult) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobResult) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobResult) Success() bool {
	return capnp.Struct(s).Bit(16)
}

func (s JobResult) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s JobResult) ContentType() ResultContentType {
	return ResultContentType(capnp.Struct(s).Uint16(4))
}

func (s JobResult) SetContentType(v ResultContentType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s JobResult) Contents() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobResult) HasContents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResult) SetContents(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobResult_List is a list of JobResult.
type JobResult_List = capnp.StructList[JobResult]

// NewJobResult creates a new list of JobResult.
func NewJobResult_List(s *capnp.Segment, sz int32) (JobResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobResult](l), err
}

// JobResult_Future is a wrapper for a JobResult promised by a client call.
type JobResult_Future struct{ *capnp.Future }

func (f JobResult_Future) Struct() (JobResult, error) {
	p, err := f.Future.Ptr()
	return JobResult(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cVml\x14\xd5\x1a~\x9fs\xf6\xabM\xdb" +
	"\xdd\xb9[\x92\xfbA\xee\x06r\xb9\xb94\xb7\x04\xda^" +
	"r!\xf7\xcaW t\xa1\xa5\xa7\xad\xa8|Dw\xbb" +
	"\xc7e\xdb\xdd\x99uf\x1a\xd8 B\x085`\x04i" +
	"\x02A\x0c?@c\xe2\x1f\xa2\xfe\xc0\x04\x0d\x89\x98\x18" +
	"\x8c\xf8KCbP\xa2\x92 \xc1h\xd4\xc6\x04\xa3\xc2" +
	"\x9833\xecN\xb7[\xf0\xd7\xce\x9c\xf3\xeey\xdf\xe7" +
	"y\x9f\xf79\xb3x+_\x19Z\xd2\xfaB\x84\x98\xd8" +
	"\x18\x8e8\xd7~\xfd\xe5\xc3\xde\xc7\x8a\xfbI\xb4\x01\xce" +
	"\x0f\x9f]n\xff\xfc\xd2O\xefS\x18Q\xa2d'\xbf" +
	"\x9e\\\xc6\xd5\xd3\x7f\xf8N\x82\xd3s\xf4\x99#\xe9\xaf" +
	"\xaf\x1cj\x18<\xc9\xdfK\x9et\x83\x8f\xf3\x9b\x04\xe7" +
	"\xf4\xee/.5-\xfd\xffq\x12s\x01G\xdf\xbce" +
	"O\xb7c\xbeL\x0f#\x8a\x10\xd0=\x1ej\x06!\xb9" +
	"'\xa4b\xb7\xee^\xbb\xea\xf6\xb7\xe3'\x1a\x1e\xbc=" +
	"<\x95,\x84\xd5\x93\x0c\xab*\x8c\xe2\xd9\x9fc\xe1\xe6" +
	"\x17Ikc\xb5XB\xf7\xab\xe1?!y\xce\x8d|" +
	"3\x9c'8W\xe7\x7f\xd0\xf3\xe3\xbe\xbb\xa7\x1b\x1d\xdb" +
	"}-\xcc\x90\xbc\xe5F\xdfp\xcf\xad\x96\xd8\xa8\x88\xb5" +
	"\x91\xebI\x11QO}\x11\x15<\xf6\xb7\x9d\x9b\xcfL" +
	"\xb27Hk\x9b\x11{82\x95<\xe9\xc6\x1e\x8f\xac" +
	" 8\x9f\xaexh\xfb\x81M\xf2b\xfd\xc1.Y\xe7" +
	"\"S\xc9\x8b*\xb8\xfbB$\x05\x82\xf3\xce\x95\x8f\x17" +
	"\xbc\xf2\xe8\x92\xcb3\xe0}\x15eH~\x17U\x7f\xba" +
	"\x15U\xf0F\x9f|{\xf7\xb3g\xbe\xfc\xa4!\xbc9" +
	"\xb1.$\x17\xc4T\xf4\xbc\x98\xaax\xa0\xfb\xb6\xad%" +
	"\xf2\xd7\x1aU<\x11\xfb&9\xe9\xc6\x1e\x8e\xa9\x8a'" +
	"^z\xfc\xe6\x91c\xff\xbc1\xa3\x86\xb31\x86\xe4y" +
	"7\xf2\\\xec\x04\xc1\xb9s\x02s\x9b\xfb?\xfa\x9e\xc4" +
	"\xdf\x11\xe8\xa3\xea2\x07\xba\x9b\x9a\xfe\xaa\xba\xac5\xbd" +
	"Np\xe6\xbf\xf5nl\xf3T\x87S_/s;\xd6" +
	"t5y\xa1I=\x9do\xbaI\x9dNIZV&" +
	"/\x17\xb1\x91LY//O\x1b\xd9\x8dF\xbeOZ" +
	"V4\x93\x97\x03\x80\x88\xf1\x10Q\x08D\xda\xc2\xd5D" +
	"\xe2\x1f\x1cb1\x03\xd0\x0e\xb5\xd6\xa9\xd6\xfe\xc5!z" +
	"\x18\xf6\x16\x8d\xfc\x86\x82\x9eC\x94\x18\xa2\x84\xbd#\x86" +
	"nK\xddF+1\xb4\x12\x1a\xe4\x1a\x94\xd6x\xd1&" +
	"\x95'Q\xcd\x93\xc9\x12\x89'8D\x91AC\xc2K" +
	"TP\x89r\x1c\xa2\xcc\xa01\xd6\x0eF\xa4\x95Td" +
	"\x91C\xecb\x00o\x07'\xd2\xc6\xd3D\xc2\xe6\x10\xfb" +
	"\x18\x9c\x9d\x869&\xcd^\x9d\xa29\xb9\xabZ\x975" +
	">2\"-\x0b \x06%\x05\xbf\xcea\x8aV\xca\x12" +
	"\xf1\x9a4\x08\x88\xd7\xf6-\"\x9a\x81\x85{X\xfa\xbc" +
	"\xd7a\xa3\xdf\xc8\xc9EY#W!R\x90Z\x1c\xc7" +
	"\xab?\xd3E$\xb6q\x88\x1d\x0c\xad\xb8\xebx\x00d" +
	"\xba\x86\xaa\x95\xddq<\x08\xa5t\x0dV+\xff\xcdi" +
	"G\xa8\x0eXJ\x96\xcav\x85\"N\xc6\xb2\x0ay\xbd" +
	"7\xa7JK\xd4\xa6\x85\x80\x04\xc1\xb1\xec\x8ci\xa7\x8d" +
	"\xac\xb7[\x9d\x0f\x7f7\x935\x02\xbbU\xdd\xfa\xbbu" +
	"\xcd\xf2\x01\xae3\x8dTIa\xac\x93FGP\x1a\x08" +
	"\xe8U\xeb\xec \x16\x1fS\xb2\x88\xd7,\xc5#6\xae" +
	"x\x9a\x85\xc9u\xa6\xe1\xe6\xd9P\xd0\x91s\xf5\xe1\x12" +
	"\xa6\x12\x01\xda<\xf5\xc3\xb4\xbf\x8c\x12\x81ks\x06\x89" +
	"\xe2\xe5\x82\x9e\x8f\x97\x0d=\xef\x8c\x1a\xd9!;cK" +
	"\x8a\x0fU\xf4\x11\xf5\xea\xca\x8c`\xd7\xe7J\xbb\x91\xa6" +
	"-s~V\xaa\x83\x95\xad\xa9\xfb\x9e\xe2\x97\xa8F\xfe" +
	"\x9bC\xfcw\x86\xbeb\xc4\x10#\xa4F\x8dlo\x0e" +
	"-\xc4\xd02+\x91\xc3F\x7f\xf4\xc14V\xcd}\x1a" +
	"\x8dU\xdbhD\xa3\x9ff\x95/\x8c>\x99r\xd7U" +
	"\xa2P5Q\xebr\"\x11\xe3\x10\xed\x0c+t#'" +
	"{s\xf7\x99R\x97\xa3\xe0A\xed\xd5\x83\xf6(\x86\x9e" +
	"\xe6\x10\x07k\x0cM(\x86\xf6q\x88\xe7\xd5\xa8\xc2S" +
	"\xfa\xa1\xfdD\xe2 \x878\xc6\xa0qxB\x9fT\x92" +
	">\xca!N1h!\xe6\xe9\xfc\xe4sD\xe2\x14\x87" +
	"x\xed\x0f\x12\\6\x8d\xbc\x99)\xadF\xc5\x96k\x8c" +
	"\x9c\xac\x0d\xa9\xbb#-wp\x9b\x89\xa1\x99\xe0\x14t" +
	"[\x9aeS\xc2\x96\xa6'\x93Y\x87\xdas\xa75\xbe" +
	";T\xca\x9e<|!vyB\xec\xf2\x84\x98\xf5\x84" +
	"\xb8\x85(U\xd0\xed\xa5=\xa9l\xc5\x96\x96c\xd9f" +
	"A\xcf\x0f\x14)\x9a)\xe8\xfe[z\x88\xf8\xa6\xfe\xfa" +
	"\\\xeb3z\xce\xda\x91\x19\x93\x83\xd2*\x1b\xfa\xb4\xbe" +
	"\x05\x04\xb2\xa5\x81 \x15\x89\x8b9\xc4\xff\x18\x1c}\xbc" +
	"\xf4\x88\xa2\x8c\xb8i\xdd\xf3;G5\xb8?S\x92\x8a" +
	"\x86YT\x996\xb2\x1b\x0a\xc5b\x9f\xb4\xe2\x0d\xd4\xd2" +
	"US\xcb,\xe2nd\x83\xea.p\x19\xfb\xb3\xcb\xd8" +
	"*ot\x97y\xa3\xab\xaa\x06\xd7:M\"\x84\xb4\x85" +
	"\xea-\xac-HO\x1b\xe4\x80\xb99\x05\xbd`+\x8e" +
	"(5\xa4X\x0aZ[\xd0\xc8\x1e\xe0&\x8b\xb2\x06\xcf" +
	"UDK\xc0\x98\xd7*p+9\xc4\xc6\xa01\xf7\x8e" +
	"\x12\x89\xf5\x1cb8h\xccb\x90H\x0cp\x88m\x01" +
	"\x0b\x9en7H\xd4\xee_\xdfI\x03\x06\x84D\xed\xe3" +
	"\xae\xb1\xcf\xa6\xfd\xd3\x86*\\\x1f\xb9\xdf\xbd\xe8w\xbf" +
	"\xa0\xba\xbf\x83C\xd8\x0c\xf0\xaf\xc5\xa7:\xfc\xfb\xe3`" +
	"`\xd6&\xd4\xbf\x0fp\x88\xa3\xb3\xdd\x8b\x8d\xc6%^" +
	"4\xf2\x16\xda\x08\x03\x1cH\xd4>c\x09j\xb1:L" +
	"\x14\xb5\xa5yo\x8c~\x0f\x00\x00\xff\xff\x92[\xf0J"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x89d5e64a8e7e9034,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb00291a156771b6b,
			0xc1654f845d3e3fd8,
			0xcb3158a325d2d5bb,
			0xd3e0a1867bba666a,
			0xdd67101174f73350,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
