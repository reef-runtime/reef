// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignID      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignID:
		return "assignID"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignID":
		return MessageToNodeKind_assignID
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty     MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignID  MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob  MessageToNode_body_Which = 2
	MessageToNode_body_Which_resumeJob MessageToNode_body_Which = 3
	MessageToNode_body_Which_abortJob  MessageToNode_body_Which = 4
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIDstartJobresumeJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignID:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_resumeJob:
		return s[21:30]
	case MessageToNode_body_Which_abortJob:
		return s[30:38]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignID() (AssignIDMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignID")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIDMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignID() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignID(v AssignIDMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignID sets the assignID field to a newly
// allocated AssignIDMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignID() (AssignIDMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIDMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIDMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobInitializationMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobInitializationMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobInitializationMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) ResumeJob() (JobResumeMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != resumeJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResumeMessage(p.Struct()), err
}

func (s MessageToNode_body) HasResumeJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetResumeJob(v JobResumeMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResumeJob sets the resumeJob field to a newly
// allocated JobResumeMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewResumeJob() (JobResumeMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobResumeMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobResumeMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobKillMessage, error) {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobKillMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobKillMessage) error {
	capnp.Struct(s).SetUint16(2, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobKillMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobKillMessage, error) {
	capnp.Struct(s).SetUint16(2, 4)
	ss, err := NewJobKillMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobKillMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignID() AssignIDMessage_Future {
	return AssignIDMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) ResumeJob() JobResumeMessage_Future {
	return JobResumeMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobKillMessage_Future {
	return JobKillMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIDMessage capnp.Struct

// AssignIDMessage_TypeID is the unique identifier for the type AssignIDMessage.
const AssignIDMessage_TypeID = 0xf62321059b987c55

func NewAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func NewRootAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func ReadRootAssignIDMessage(msg *capnp.Message) (AssignIDMessage, error) {
	root, err := msg.Root()
	return AssignIDMessage(root.Struct()), err
}

func (s AssignIDMessage) String() string {
	str, _ := text.Marshal(0xf62321059b987c55, capnp.Struct(s))
	return str
}

func (s AssignIDMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIDMessage) DecodeFromPtr(p capnp.Ptr) AssignIDMessage {
	return AssignIDMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIDMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIDMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIDMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIDMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIDMessage) NodeID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIDMessage) HasNodeID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIDMessage) SetNodeID(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIDMessage_List is a list of AssignIDMessage.
type AssignIDMessage_List = capnp.StructList[AssignIDMessage]

// NewAssignIDMessage creates a new list of AssignIDMessage.
func NewAssignIDMessage_List(s *capnp.Segment, sz int32) (AssignIDMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIDMessage](l), err
}

// AssignIDMessage_Future is a wrapper for a AssignIDMessage promised by a client call.
type AssignIDMessage_Future struct{ *capnp.Future }

func (f AssignIDMessage_Future) Struct() (AssignIDMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIDMessage(p.Struct()), err
}

type JobResumeMessage capnp.Struct

// JobResumeMessage_TypeID is the unique identifier for the type JobResumeMessage.
const JobResumeMessage_TypeID = 0xb27dd3c6ab583dec

func NewJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func NewRootJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func ReadRootJobResumeMessage(msg *capnp.Message) (JobResumeMessage, error) {
	root, err := msg.Root()
	return JobResumeMessage(root.Struct()), err
}

func (s JobResumeMessage) String() string {
	str, _ := text.Marshal(0xb27dd3c6ab583dec, capnp.Struct(s))
	return str
}

func (s JobResumeMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResumeMessage) DecodeFromPtr(p capnp.Ptr) JobResumeMessage {
	return JobResumeMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResumeMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResumeMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResumeMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResumeMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResumeMessage) Job() (JobInitializationMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s JobResumeMessage) HasJob() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResumeMessage) SetJob(v JobInitializationMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJob sets the job field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s JobResumeMessage) NewJob() (JobInitializationMessage, error) {
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s JobResumeMessage) PreviousState() (PreviousJobState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PreviousJobState(p.Struct()), err
}

func (s JobResumeMessage) HasPreviousState() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobResumeMessage) SetPreviousState(v PreviousJobState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPreviousState sets the previousState field to a newly
// allocated PreviousJobState struct, preferring placement in s's segment.
func (s JobResumeMessage) NewPreviousState() (PreviousJobState, error) {
	ss, err := NewPreviousJobState(capnp.Struct(s).Segment())
	if err != nil {
		return PreviousJobState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// JobResumeMessage_List is a list of JobResumeMessage.
type JobResumeMessage_List = capnp.StructList[JobResumeMessage]

// NewJobResumeMessage creates a new list of JobResumeMessage.
func NewJobResumeMessage_List(s *capnp.Segment, sz int32) (JobResumeMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[JobResumeMessage](l), err
}

// JobResumeMessage_Future is a wrapper for a JobResumeMessage promised by a client call.
type JobResumeMessage_Future struct{ *capnp.Future }

func (f JobResumeMessage_Future) Struct() (JobResumeMessage, error) {
	p, err := f.Future.Ptr()
	return JobResumeMessage(p.Struct()), err
}
func (p JobResumeMessage_Future) Job() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p JobResumeMessage_Future) PreviousState() PreviousJobState_Future {
	return PreviousJobState_Future{Future: p.Future.Field(1, nil)}
}

type PreviousJobState capnp.Struct

// PreviousJobState_TypeID is the unique identifier for the type PreviousJobState.
const PreviousJobState_TypeID = 0xbf41758934cdd6b1

func NewPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func NewRootPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func ReadRootPreviousJobState(msg *capnp.Message) (PreviousJobState, error) {
	root, err := msg.Root()
	return PreviousJobState(root.Struct()), err
}

func (s PreviousJobState) String() string {
	str, _ := text.Marshal(0xbf41758934cdd6b1, capnp.Struct(s))
	return str
}

func (s PreviousJobState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PreviousJobState) DecodeFromPtr(p capnp.Ptr) PreviousJobState {
	return PreviousJobState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PreviousJobState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PreviousJobState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PreviousJobState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PreviousJobState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PreviousJobState) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s PreviousJobState) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s PreviousJobState) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s PreviousJobState) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PreviousJobState) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// PreviousJobState_List is a list of PreviousJobState.
type PreviousJobState_List = capnp.StructList[PreviousJobState]

// NewPreviousJobState creates a new list of PreviousJobState.
func NewPreviousJobState_List(s *capnp.Segment, sz int32) (PreviousJobState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PreviousJobState](l), err
}

// PreviousJobState_Future is a wrapper for a PreviousJobState promised by a client call.
type PreviousJobState_Future struct{ *capnp.Future }

func (f PreviousJobState_Future) Struct() (PreviousJobState, error) {
	p, err := f.Future.Ptr()
	return PreviousJobState(p.Struct()), err
}

type JobInitializationMessage capnp.Struct

// JobInitializationMessage_TypeID is the unique identifier for the type JobInitializationMessage.
const JobInitializationMessage_TypeID = 0xc1cb98e422996a9c

func NewJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func NewRootJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func ReadRootJobInitializationMessage(msg *capnp.Message) (JobInitializationMessage, error) {
	root, err := msg.Root()
	return JobInitializationMessage(root.Struct()), err
}

func (s JobInitializationMessage) String() string {
	str, _ := text.Marshal(0xc1cb98e422996a9c, capnp.Struct(s))
	return str
}

func (s JobInitializationMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobInitializationMessage) DecodeFromPtr(p capnp.Ptr) JobInitializationMessage {
	return JobInitializationMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobInitializationMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobInitializationMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobInitializationMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobInitializationMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobInitializationMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobInitializationMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobInitializationMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobInitializationMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobInitializationMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobInitializationMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobInitializationMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobInitializationMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobInitializationMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobInitializationMessage_List is a list of JobInitializationMessage.
type JobInitializationMessage_List = capnp.StructList[JobInitializationMessage]

// NewJobInitializationMessage creates a new list of JobInitializationMessage.
func NewJobInitializationMessage_List(s *capnp.Segment, sz int32) (JobInitializationMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobInitializationMessage](l), err
}

// JobInitializationMessage_Future is a wrapper for a JobInitializationMessage promised by a client call.
type JobInitializationMessage_Future struct{ *capnp.Future }

func (f JobInitializationMessage_Future) Struct() (JobInitializationMessage, error) {
	p, err := f.Future.Ptr()
	return JobInitializationMessage(p.Struct()), err
}

type JobKillMessage capnp.Struct

// JobKillMessage_TypeID is the unique identifier for the type JobKillMessage.
const JobKillMessage_TypeID = 0xdd67101174f73350

func NewJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func NewRootJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func ReadRootJobKillMessage(msg *capnp.Message) (JobKillMessage, error) {
	root, err := msg.Root()
	return JobKillMessage(root.Struct()), err
}

func (s JobKillMessage) String() string {
	str, _ := text.Marshal(0xdd67101174f73350, capnp.Struct(s))
	return str
}

func (s JobKillMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobKillMessage) DecodeFromPtr(p capnp.Ptr) JobKillMessage {
	return JobKillMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobKillMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobKillMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobKillMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobKillMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobKillMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobKillMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobKillMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobKillMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobKillMessage_List is a list of JobKillMessage.
type JobKillMessage_List = capnp.StructList[JobKillMessage]

// NewJobKillMessage creates a new list of JobKillMessage.
func NewJobKillMessage_List(s *capnp.Segment, sz int32) (JobKillMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobKillMessage](l), err
}

// JobKillMessage_Future is a wrapper for a JobKillMessage promised by a client call.
type JobKillMessage_Future struct{ *capnp.Future }

func (f JobKillMessage_Future) Struct() (JobKillMessage, error) {
	p, err := f.Future.Ptr()
	return JobKillMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSync"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cV]\x8c\x13U\x14>\xe7\xde\xb6S7\xdb" +
	"m\xc7\xa9/\x06lX\xc5\xc8\xc6\x12\xa0\x8b\x11\"Y" +
	"\x16\x17B\x0b\xbb\xeee\x01\x05Mt\xba\xbd\x96)\xed" +
	"\xdc:3+\xacH@\x02\x06\x8c?\x90@\xd8U\x1e" +
	"\xc0\xf8b\x0c1\xfa`\x82\x89Q\x1e\x10\x11} \x04" +
	"\x1fP\xa2\x12\x0d\x89!Q\x88\x11\x05a\xcc\x9dv;" +
	"\xa5;\x1b|\xda\xbb\xf7~\xf7\x9cs\xbf\xef;g:" +
	"g\x06]\x1c\x9a\x1b{+\x02\x84\xad\x0cG\xdc\x0b7" +
	"\xae\x7f\x9d]W\xde\x01\xac\x03\xd1\xfd\xe3\xfb\xd3\xc9\x1f" +
	"N\xfey\x02\xc2\xa8\x00hizQ[@\xe5j>" +
	"\xdd\x04\xe8\x1e\xde\xf2\xe3\xc9\xbb\x1eYt\x00\xd84D" +
	"\xd7\\\xbb~k\xc6\xb5\xde\x855\xa8`\x181\xb3\x8f" +
	"\xb6!`f\x9c\xa6\x10\xd0}z\xcb\xd2\xdek\x97G" +
	"\x0e\x06F>\x16\xba\xaa\x9d\x08\xc9\xd5\xf1\x90\x8c,\xca" +
	"G\xff\x8e\x86\xdb\xc6@\xed >\x160\x83\xe1\xbbQ" +
	"S\xc3\x12\x19\x0b?\x01\xe8\x9e\xef\xfc\xaa\xfb\xca\xf6[" +
	"\x87\x83\xc2ff\x86\x09js=t:,\xe36j" +
	"\x0c*\xe2\x8d\xf0Em\xdc\x03\x1f\xf0\xc0\x97\x17=\xf5" +
	"\xc1\x97g\xb7~\x0cjG3\x96H\xc4\xb9\xf0u\xed" +
	"g\x0f{\xc1\xc3~\xf4\xdd\xb7\xdd{Fz?\x0f\x0c" +
	"\xbc(r]\xcbF\xe4jiD\x82\x0f\x95\xc6;\x7f" +
	"\x19;}\xbc\x15,#g\x8eF\x16\xa2\xf6\x99\x87>" +
	"\x16\xf9\x10\xd0-=\xff\xe9\x96W\x8f\xfct6\xf0\x85" +
	"\xeb\x94y\xa8\x19\x8aDsE\xc6\x1e\xcc\\s\xd4D" +
	"\xf1BK\xd1^\x1d\xa7\x94\xdf\xb4s\x1e\xf6\x8c\xd2\x03" +
	"\xe8\xeez\xfb\xd9Ko\xee\x7f\xf0\xd7I,_Q\x08" +
	"j7=\xe4?\xca6@\xf7\xe6A\x9c\xd66\xf0\xcd" +
	"\xef\xc0\xee\xc3&)\xa5\xd2\x041\xb3 z/\x02j" +
	"\xbdQY\xc1\x9a\x97\xc7\xde\x09\xcf\xb8\xff\xaf\xa0\x0a\x8e" +
	"D\xafjG\xa3r\xf5~TV\xd0\xf9\xc9\x17\xd1\xb5" +
	"W\xbb\xdc &\xb4S\xd1\xf3\xda9\x0f|&z\x09" +
	"\xd2n\x85\xdb\xb6^\xe4\xb3\xc9\xb0^5\xab\x0bs\"" +
	"\xbfR\x14\xfb\xb9m+z\x91\x0f\"\xb2(\x0d\x01\x84" +
	"\x10@\x9d\xb5\x04\x80=@\x91\xcd!\x88\x98D\xb9\x97" +
	"\x96{\x0fQd\xdd\x04\xb7\x95Eq\x85a\x16P\x01" +
	"\x82\x0a\xe0\xb6aa:\xdct0\x06\x04c\x80\x8d\\" +
	"\xb4\x96\xab\xbf\xf6\xefj1 \x0a|v^\x14F\x01" +
	"X\x92\x86\xda]\xb7\x16|\xeb<\x00\xb6\x99\"\xdbI" +
	"0\x86\xb7\xdc$\x12\x00\xf5\x95\x1c\x00\xdbN\x91\xbdN" +
	"0Fn\xbaI\xa4\x00\xea\x1e\xb9\xbb\x9b\"\xdbO0" +
	"F\xffu\x93\x18\x02P\xf7\xad\x02`{)\xb2C\x04" +
	"c\xa1\x1bn\x12\xc3\x00\xea\xb8\xc4\x8eQd\xef\x11L" +
	"\xf1J\xd5\x19\x85\x88\xab\xdb\xb6Q4\xb3}\x00\x80\x09" +
	"\x9fo@L\x00\xba\xb6\xa3[NN\xe4k\xa7\x0d\xaf" +
	"\xd5O-n\x8fTxN\x00\xe61\xe1[\xbc~\xaa" +
	"\xe7E\xd3\xdd\x86\x97\xea\xa7-\x02\xd4IYf\x89T" +
	"E\xf2\xd2\"AW\xb3\x04\xd8\xe4!5\xdd\x05$\xbe" +
	"Q\xd2\x1f\xf7;\x1d\x10\xe3\x80q\xc9\xed\x14\xec/\xb3" +
	"\x84\x97g\x85abA&k\xf7H\x9e\xde%\xef\xaa" +
	"\xf7\xc8?D\x8d\x95\x00\xe2U\xc3,\xc6\xab\xc2,\xba" +
	"%\x91\x1frt\x87C|h\xd4\x1cn\x0d\x9c\xf3N" +
	"-\x87\x17\xea)\xa0\xe5\x0dy\xdf2\x136\x9a+\x95" +
	"~\x98\"{\x94\xa0\xbbIX\x1b\xb9\x955A)\xf0" +
	"\xcd\x18\x05\x82Q\xc0TI\xe4\xb3}\xd8\x0e\x04\xdb\xa7" +
	"dm\xb5\x18P\xee\xccYc\xc2\xde\xc6Y\xa3o\x83" +
	"8\xf3\xbbc\x95'u\x7fO\xed\xa0%S\xa7\x9fI" +
	"mt\x88\xe5?M)\x89|\x80}\xaa\x16\x7f\xd1\x10" +
	"#6\xa4<Z1\xe1O\xbe`\x93\x0c\xd6/\xe4D" +
	"OM\x89\x96:r\x01\x0c\xbf\x06\xc0\xba)\xb2\xc5D" +
	"&\x14E\x8b\xdb\xb6td\x1b\x10l\x03t\x0d\xd3\xe1" +
	"V\xd5\xe2\xe8p\xab\xa6.L\xd5\xb89\x91\xcf\x9a\x86" +
	"c\xe8e\xe3%\xdd1\x84\xd9LG{\xa3\x8c\xa5R" +
	"\xe8>\x8al\xd0/\xa3_\x0a\xbd\x9c\"[MP%" +
	"X\xebh\xb6\x03\x80\x0dRd\xcf\xfcO\xf5\xbd\xfa\xf5" +
	"\xca\x12\x1cu\xf8\xe3\xa2\xc0\xa7\xact\xb9n\x16\xec\x0d" +
	"\xfaF\xbe\x8a\xdbUa\x16\xfay*H\xb7\xf5\x01|" +
	"I\x0e\xe7Pd\x8f\x11t\xcd\x91\xca\x93\xb2,\xa0\x96" +
	"=1\xdd\\S\x14\xf8\x80^\xe1\x92\xc4)l\x99\x13" +
	"\xf9\x15F\xb9\xdc\xcf\xed\xf8D\xd6P#kLR\x11" +
	"\xa5\xc8\x92d*w\x07\x0dJ9a\xbd\x8e\xaaq7" +
	"\xbf\xd6\xa8\xe9Z\xa3\xce\xcc\x01 UgX\x00\x18R" +
	"\xa7\xe7nk\xdb\xa6\x09\xe7\x1a\xa6\xe1Hr 5$" +
	"\xe9i\x9eow\x18\x14\xb3\xf3\x82\x16F%{\x8d9" +
	"=k\x9e\xef{\x7fN\xa7K\xbe\xf1\x1bS\xf6\xf6\xd1" +
	"\x81\x09\xffc\x15\xec\xf4\xdez\xcd\xcd\xc25Q\xb8\xd0" +
	"\xa7\xb0G\xea\x91\xed\x9b\xe4\x04\xd2<\x95\x1c>4J" +
	"\xcda\x19%\xd1\x88\xa2K\x9f>G\x91\x95\x9b\xda\xd6" +
	"\x90\xfao\xa0\xc8\x1c\x82Hj/zAN\x922E" +
	"\xb6\x9b\xa0J\xb1\xf6\xe1\xd9%o\xef\xa4\xc8\xf6N2" +
	"\xef\x84S\x02\xda-^\x16E\x1b;\x00\x07)b\xc2" +
	"\xff\x85\x08(7\x1b\xcd\x08\x8a\xc3\xad\x89'\xfd\x17\x00" +
	"\x00\xff\xff_1\xce\xc7"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb27dd3c6ab583dec,
			0xbf41758934cdd6b1,
			0xc1cb98e422996a9c,
			0xd3e0a1867bba666a,
			0xdd67101174f73350,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xf62321059b987c55,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
