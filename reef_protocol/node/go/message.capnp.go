// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignId      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
	MessageToNodeKind_abortJob      MessageToNodeKind = 5
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignId:
		return "assignId"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"
	case MessageToNodeKind_abortJob:
		return "abortJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignId":
		return MessageToNodeKind_assignId
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob
	case "abortJob":
		return MessageToNodeKind_abortJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty    MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignId MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob MessageToNode_body_Which = 2
	MessageToNode_body_Which_abortJob MessageToNode_body_Which = 3
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIdstartJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignId:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_abortJob:
		return s[21:29]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignId() (AssignIdMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignId")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIdMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignId() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignId(v AssignIdMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignId sets the assignId field to a newly
// allocated AssignIdMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignId() (AssignIdMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIdMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIdMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobStartMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStartMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobStartMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobStartMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobStartMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobStartMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobStartMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobAbortMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobAbortMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobAbortMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobAbortMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobAbortMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobAbortMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobAbortMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignId() AssignIdMessage_Future {
	return AssignIdMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobStartMessage_Future {
	return JobStartMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobAbortMessage_Future {
	return JobAbortMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIdMessage capnp.Struct

// AssignIdMessage_TypeID is the unique identifier for the type AssignIdMessage.
const AssignIdMessage_TypeID = 0xb00291a156771b6b

func NewAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func NewRootAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func ReadRootAssignIdMessage(msg *capnp.Message) (AssignIdMessage, error) {
	root, err := msg.Root()
	return AssignIdMessage(root.Struct()), err
}

func (s AssignIdMessage) String() string {
	str, _ := text.Marshal(0xb00291a156771b6b, capnp.Struct(s))
	return str
}

func (s AssignIdMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIdMessage) DecodeFromPtr(p capnp.Ptr) AssignIdMessage {
	return AssignIdMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIdMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIdMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIdMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIdMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIdMessage) NodeId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIdMessage) HasNodeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIdMessage) SetNodeId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIdMessage_List is a list of AssignIdMessage.
type AssignIdMessage_List = capnp.StructList[AssignIdMessage]

// NewAssignIdMessage creates a new list of AssignIdMessage.
func NewAssignIdMessage_List(s *capnp.Segment, sz int32) (AssignIdMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIdMessage](l), err
}

// AssignIdMessage_Future is a wrapper for a AssignIdMessage promised by a client call.
type AssignIdMessage_Future struct{ *capnp.Future }

func (f AssignIdMessage_Future) Struct() (AssignIdMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIdMessage(p.Struct()), err
}

type JobStartMessage capnp.Struct

// JobStartMessage_TypeID is the unique identifier for the type JobStartMessage.
const JobStartMessage_TypeID = 0xc1654f845d3e3fd8

func NewJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return JobStartMessage(st), err
}

func NewRootJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return JobStartMessage(st), err
}

func ReadRootJobStartMessage(msg *capnp.Message) (JobStartMessage, error) {
	root, err := msg.Root()
	return JobStartMessage(root.Struct()), err
}

func (s JobStartMessage) String() string {
	str, _ := text.Marshal(0xc1654f845d3e3fd8, capnp.Struct(s))
	return str
}

func (s JobStartMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartMessage) DecodeFromPtr(p capnp.Ptr) JobStartMessage {
	return JobStartMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobStartMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStartMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s JobStartMessage) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStartMessage) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStartMessage) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s JobStartMessage) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// JobStartMessage_List is a list of JobStartMessage.
type JobStartMessage_List = capnp.StructList[JobStartMessage]

// NewJobStartMessage creates a new list of JobStartMessage.
func NewJobStartMessage_List(s *capnp.Segment, sz int32) (JobStartMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[JobStartMessage](l), err
}

// JobStartMessage_Future is a wrapper for a JobStartMessage promised by a client call.
type JobStartMessage_Future struct{ *capnp.Future }

func (f JobStartMessage_Future) Struct() (JobStartMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartMessage(p.Struct()), err
}

type JobAbortMessage capnp.Struct

// JobAbortMessage_TypeID is the unique identifier for the type JobAbortMessage.
const JobAbortMessage_TypeID = 0xd98a9e5f84dacc76

func NewJobAbortMessage(s *capnp.Segment) (JobAbortMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobAbortMessage(st), err
}

func NewRootJobAbortMessage(s *capnp.Segment) (JobAbortMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobAbortMessage(st), err
}

func ReadRootJobAbortMessage(msg *capnp.Message) (JobAbortMessage, error) {
	root, err := msg.Root()
	return JobAbortMessage(root.Struct()), err
}

func (s JobAbortMessage) String() string {
	str, _ := text.Marshal(0xd98a9e5f84dacc76, capnp.Struct(s))
	return str
}

func (s JobAbortMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobAbortMessage) DecodeFromPtr(p capnp.Ptr) JobAbortMessage {
	return JobAbortMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobAbortMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobAbortMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobAbortMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobAbortMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobAbortMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobAbortMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobAbortMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobAbortMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobAbortMessage_List is a list of JobAbortMessage.
type JobAbortMessage_List = capnp.StructList[JobAbortMessage]

// NewJobAbortMessage creates a new list of JobAbortMessage.
func NewJobAbortMessage_List(s *capnp.Segment, sz int32) (JobAbortMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobAbortMessage](l), err
}

// JobAbortMessage_Future is a wrapper for a JobAbortMessage promised by a client call.
type JobAbortMessage_Future struct{ *capnp.Future }

func (f JobAbortMessage_Future) Struct() (JobAbortMessage, error) {
	p, err := f.Future.Ptr()
	return JobAbortMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
	MessageFromNodeKind_jobResult    MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"
	case MessageFromNodeKind_jobResult:
		return "jobResult"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync
	case "jobResult":
		return MessageFromNodeKind_jobResult

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobResult    MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSyncjobResult"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]
	case MessageFromNode_body_Which_jobResult:
		return s[17:26]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobResult() (JobResult, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobResult")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResult(p.Struct()), err
}

func (s MessageFromNode_body) HasJobResult() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobResult(v JobResult) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobResult sets the jobResult field to a newly
// allocated JobResult struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobResult() (JobResult, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobResult(capnp.Struct(s).Segment())
	if err != nil {
		return JobResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobResult() JobResult_Future {
	return JobResult_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

type ResultContentType uint16

// ResultContentType_TypeID is the unique identifier for the type ResultContentType.
const ResultContentType_TypeID = 0xcb3158a325d2d5bb

// Values of ResultContentType.
const (
	ResultContentType_int64       ResultContentType = 0
	ResultContentType_bytes       ResultContentType = 1
	ResultContentType_stringPlain ResultContentType = 2
	ResultContentType_stringJSON  ResultContentType = 3
)

// String returns the enum's constant name.
func (c ResultContentType) String() string {
	switch c {
	case ResultContentType_int64:
		return "int64"
	case ResultContentType_bytes:
		return "bytes"
	case ResultContentType_stringPlain:
		return "stringPlain"
	case ResultContentType_stringJSON:
		return "stringJSON"

	default:
		return ""
	}
}

// ResultContentTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultContentTypeFromString(c string) ResultContentType {
	switch c {
	case "int64":
		return ResultContentType_int64
	case "bytes":
		return ResultContentType_bytes
	case "stringPlain":
		return ResultContentType_stringPlain
	case "stringJSON":
		return ResultContentType_stringJSON

	default:
		return 0
	}
}

type ResultContentType_List = capnp.EnumList[ResultContentType]

func NewResultContentType_List(s *capnp.Segment, sz int32) (ResultContentType_List, error) {
	return capnp.NewEnumList[ResultContentType](s, sz)
}

type JobResult capnp.Struct

// JobResult_TypeID is the unique identifier for the type JobResult.
const JobResult_TypeID = 0x89d5e64a8e7e9034

func NewJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func NewRootJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func ReadRootJobResult(msg *capnp.Message) (JobResult, error) {
	root, err := msg.Root()
	return JobResult(root.Struct()), err
}

func (s JobResult) String() string {
	str, _ := text.Marshal(0x89d5e64a8e7e9034, capnp.Struct(s))
	return str
}

func (s JobResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResult) DecodeFromPtr(p capnp.Ptr) JobResult {
	return JobResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResult) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobResult) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobResult) Success() bool {
	return capnp.Struct(s).Bit(16)
}

func (s JobResult) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s JobResult) ContentType() ResultContentType {
	return ResultContentType(capnp.Struct(s).Uint16(4))
}

func (s JobResult) SetContentType(v ResultContentType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s JobResult) Contents() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobResult) HasContents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResult) SetContents(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobResult_List is a list of JobResult.
type JobResult_List = capnp.StructList[JobResult]

// NewJobResult creates a new list of JobResult.
func NewJobResult_List(s *capnp.Segment, sz int32) (JobResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobResult](l), err
}

// JobResult_Future is a wrapper for a JobResult promised by a client call.
type JobResult_Future struct{ *capnp.Future }

func (f JobResult_Future) Struct() (JobResult, error) {
	p, err := f.Future.Ptr()
	return JobResult(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cVol\x14\xd5\x17\xbd\xe7\xbd\xfd\xd7\xa6\xed" +
	"v~[\x92\x9fJ\xdc@\xc4Hc\x09\xb4\x95\x08Q" +
	"\xa1\x10\x08]h\xe9k+*\x7f\x82\xbb\xdd\xe7\xb2\xed" +
	"\xee\xcc:3\x156\x88\x10B\x0d\x10A\x9a@\x10C" +
	"\x0chL\xfcB\xd4\x0f\x98\xa0!\x11\x13\x83\x11>i" +
	"H\x14%*\x09\x12\x12\x8d\xda\x98hT\x18\xf3f\x96" +
	"\xdd\xe9v\x0b~\xda\x99\xf7\xee\xbe{\xcf\xb9\xe7\x9e7" +
	"\xf37\xf0\xa5\x81\x05\x8d\xaf\x86\x88\x895\xc1\x90s\xe5" +
	"\xef\xbf>\xef~&\xb7\x9bD\x13\xe0\xfc\xfa\xcd\x85\x96" +
	"o\xcf\xff\xfe)\x05\x11&\x8a\xb5\xf1\xab\xb1E\\=" +
	"=\xc2\xb7\x12\x9c\xceC/\x1dL\xfcxi_\xcd\xe0" +
	"q\xfeI\xec\x98\x1b|\x84_'8'\xb6\x7fw\xbe" +
	"n\xe1\xe3GH\xcc\x04\x1c}\xdd\xfa\x1d\x1d\x8e\xf9&" +
	"=\x890\x02@\xc7h\xa0\x1e\x84\xd8\x8e\x80\x8a\xdd\xb0" +
	"}E\xd7\x1f?\x8d\x1e\xady\xf0\xa6\xe0D,\x1bT" +
	"O2\xa8\xaa0r\xa7\xfe\x8c\x04\xeb_#\xad\x89U" +
	"b\x09\x1do\x07\xff\x87\xd8i7\xf2\xfd`\x86\xe0\\" +
	"\x9e\xfdY\xe7o\xbbn\x9d\xa8ul\xc7\x95 C\xec" +
	"\x86\x1b}\xcd=\xb7\\b\xad\"V\x84\xae\xc6DH" +
	"=\xf5\x84T\xf0\xc8}[\xd7\x9d\x1cg\xef\x91\xd64" +
	"%\xf6@h\"v\xcc\x8d=\x12ZBp\xbeZ\xf2" +
	"\xc4\xa6=k\xe5\xb9\xea\x83]\xb2N\x87&b\xe7T" +
	"p\xc7\xd9P\x1c\x04\xe7\xa3K_\xccy\xeb\xe9\x05\x17" +
	"\xa6\xc0\xfb!\xcc\x10\xfb9\xac\xfet#\xac\xe0\x0d?" +
	"\xf7\xe1\xf6\x97O~\xffeMx3\"\xed\x88\xcd\x89" +
	"\xa8\xe8Y\x11U\xf1\x0b\x17/\xef\xd9\xfc\xc6\xfe\xafk" +
	"U<\x16\x99\x88\x8d\xbb\xb1\x07\"\xaa\xe2\xb1\xd77_" +
	"?x\xf8\xc1kSj8\x15a\x88\x9dq#OG" +
	"\x8e\x12\x9c\x9bG1\xb3\xbe\xf7\xe2/$\xee\x87\xaf\x8f" +
	"\xaa\xcb\x1c\xe8\xa8\xab\xbbWuY\xab{\x97\xe0\xcc\xfe" +
	"\xe0\xe3\xc8\xba\x89V\xa7\xba^\xe6v\xac\xeer\xecl" +
	"\x9dz:Sw\x9d\xda\x9c\xbc\xb4\xacdF\xcecC" +
	"\xc9\x82^X\x9c0Rk\x8cL\x8f\xb4\xacp2#" +
	"\xfb\x00\x11\xe1\x01\xa2\x00\x88\xb4\xb9\xcb\x88\xc4\x03\x1cb" +
	">\x03\xd0\x02\xb5\xd6\xa6\xd6\x1e\xe2\x10\x9d\x0c;sF" +
	"fuVO#L\x0ca\xc2\xce!C\xb7\xa5n\xa3" +
	"\x91\x18\x1a\x095r\xf5Kk4g\x93\xca\xd3\\\xce" +
	"\x93L\x11\x89g9D\x8eAC\xb3\x97(\xab\x12\xa5" +
	"9D\x81Ac\xac\x05\x8cH\xcb\xab\xc8\x1c\x87\xd8\xc6" +
	"\x00\xde\x02N\xa4\x8d&\x88\x84\xcd!v18[\x0d" +
	"sD\x9a\xdd:\x85\xd3r[\xb9.kthHZ" +
	"\x16@\x0cJ\x0a\xa5:\x07)\\,HD+\xd2 " +
	" Z\xd9\xb7\x88h\x0a\x16\xeea\xe9\xf1^\x07\x8d^" +
	"#-\xe7\xa5\x8ct\x91HAjp\x1c\xaf\xfed;" +
	"\x91\xd8\xc8!\xb604\xe2\x96\xe3\x01\x90\x89\x0a\xaaF" +
	"v\xd3\xf1 \xe4\x13\x15X\x8d\xfc\x1f\xa7\x05\x81*`" +
	"q\x99/\xd8E\x0a9I\xcb\xcaf\xf4\xee\xb4*\xad" +
	"\xb92-\x044\x13\x1c\xcbN\x9av\xc2Hy\xbb\xe5" +
	"\xf9(\xed&S\x86o\xb7\xac\xdb\xd2nU\xb3J\x00" +
	"W\x9aF<\xaf0VI\xa3\xd5/\x0d\xf8\xf4\xaa\xb5" +
	"\xb5\x12\x8b\x8e(YD+\x96\xe2\x11\x1bU<M\xc3" +
	"\xe4J\xd3p\xf3\xac\xce\xeaH\xbb\xfap\x09S\x89\x00" +
	"m\x96\xfaa\xda=\xc3D\xe0\xda\x8c~\xa2h!\xab" +
	"g\xa2\x05C\xcf8\xc3Fj\xc0N\xda\x92\xa2\x03E" +
	"}H\xbd\xba2#\xd8\xd5\xb9\x12n\xa4i\xcbt)" +
	"+U\xc1JU\xd4}[\xf1\x0bT#\x1f\xe6\x10\x8f" +
	"N\xd1W\x84\x18\"\x84\xf8\xb0\x91\xeaN\xa3\x81\x18\x1a" +
	"\xa6%r\xd0\xe8\x0d\xdf\x9d\xc6\xb2\xb9O\xa2\xb1l\x1b" +
	"\xb5h,\xa5\xe9*\x09\xa3G\xc6\xddu\x95(PN" +
	"\xd4\xb8\x98HD8D\x0b\xc3\x12\xddH\xcb\xee\xf4\x1d" +
	"\xa6\xd4\xe5\xc8\x7fPK\xf9\xa0\x1d\x8a\xa1\x179\xc4\xde" +
	"\x0aCc\x8a\xa1]\x1c\xe2\x155\xaa\xf0\x94\xbeo7" +
	"\x91\xd8\xcb!\x0e3h\x1c\x9e\xd0\xc7\x95\xa4\x0fq\x88" +
	"\xe3\x0cZ\x80y:?\xb6\x9fH\x1c\xe7\x10\xef\xfcG" +
	"\x82\x0b\xa6\x911\x93\xf9e(\xdar\xb9\x91\x96\x95!" +
	"uw\xa4\xe5\x0en=1\xd4\x13\x9c\xacnK\xb3`" +
	"J\xd8\xd2\xf4d2\xedP{\xee\xb4\xbc\xe4\x0e\xc5\x82" +
	"'\x8f\x92\x10\xdb=!\xb6{BLyB\\O\x14" +
	"\xcf\xea\xf6\xc2\xcex\xaahK\xcb\xb1l3\xabg\xfa" +
	"r\x14Nf\xf5\xd2[b\x80\xf8\xda\xde\xea\\\xab\x92" +
	"z\xda\xda\x92\x1c\x91\xfd\xd2*\x18\xfa\xa4\xbe\xf9\x04\xb2" +
	"\xbe\x86 \x15\x89\xf39\xc4c\x0c\x8e>\x9a\x7fJQ" +
	"F\xdc\xb4n\xfb\x9d\xa3\x1a\xdc\x9b\xccKE\xc34\xaa" +
	"L\x18\xa9.e\x07\xd3\xc8\xa5\xbd\"\x97i\xd4]\xcb" +
	"\x07\xd5e\xe0R\xf6\x7f\x97\xb2.ov\x17y\xb3\xab" +
	"\xca\x06\xd7\xdaL\"\x04\xb4\xb9\xea-\xa8\xcdIL\x9a" +
	"d\x9f\xbb9Y=k+\x92(>\xa0h\xf2{\x9b" +
	"\xdf\xc9\xeeb'\xf3R\x06O\x17E\x83\xcf\x99W(" +
	"pK9\xc4\x1a\xbf3w\x0f\x13\x89U\x1cb\xd0\xef" +
	"\xcc\xa2\x9fH\xf4q\x88\x8d>\x0f\x9e\xec7h\xae\\" +
	"\xc0%+\xf59\x10\x9a+_w\xb5\x8d6Q:m" +
	"\xa0\xc8\xf5\xa1;]\x8c\xa5\xf6gU\xfb\xb7p\x08\x9b" +
	"\x01\xa5{\xf1\xf9\xd6\xd2\x05\xb2\xd77lc\xea\xdf{" +
	"8\xc4\xa1\xe9.\xc6Z\xf3\x12\xcd\x19\x19\x0bM\x84>" +
	"\x0e4W\xbec\x09j\xb1<M\x14\xb6\xa5y{\x8e" +
	"\xfe\x0d\x00\x00\xff\xff\xf0\xd8\xf4("

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x89d5e64a8e7e9034,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb00291a156771b6b,
			0xc1654f845d3e3fd8,
			0xcb3158a325d2d5bb,
			0xd3e0a1867bba666a,
			0xd98a9e5f84dacc76,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
