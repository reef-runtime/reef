// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignID      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignID:
		return "assignID"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignID":
		return MessageToNodeKind_assignID
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty     MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignID  MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob  MessageToNode_body_Which = 2
	MessageToNode_body_Which_resumeJob MessageToNode_body_Which = 3
	MessageToNode_body_Which_abortJob  MessageToNode_body_Which = 4
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIDstartJobresumeJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignID:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_resumeJob:
		return s[21:30]
	case MessageToNode_body_Which_abortJob:
		return s[30:38]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignID() (AssignIDMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignID")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIDMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignID() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignID(v AssignIDMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignID sets the assignID field to a newly
// allocated AssignIDMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignID() (AssignIDMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIDMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIDMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobInitializationMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobInitializationMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobInitializationMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) ResumeJob() (JobResumeMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != resumeJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResumeMessage(p.Struct()), err
}

func (s MessageToNode_body) HasResumeJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetResumeJob(v JobResumeMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResumeJob sets the resumeJob field to a newly
// allocated JobResumeMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewResumeJob() (JobResumeMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobResumeMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobResumeMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobKillMessage, error) {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobKillMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobKillMessage) error {
	capnp.Struct(s).SetUint16(2, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobKillMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobKillMessage, error) {
	capnp.Struct(s).SetUint16(2, 4)
	ss, err := NewJobKillMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobKillMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignID() AssignIDMessage_Future {
	return AssignIDMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) ResumeJob() JobResumeMessage_Future {
	return JobResumeMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobKillMessage_Future {
	return JobKillMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIDMessage capnp.Struct

// AssignIDMessage_TypeID is the unique identifier for the type AssignIDMessage.
const AssignIDMessage_TypeID = 0xf62321059b987c55

func NewAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func NewRootAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func ReadRootAssignIDMessage(msg *capnp.Message) (AssignIDMessage, error) {
	root, err := msg.Root()
	return AssignIDMessage(root.Struct()), err
}

func (s AssignIDMessage) String() string {
	str, _ := text.Marshal(0xf62321059b987c55, capnp.Struct(s))
	return str
}

func (s AssignIDMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIDMessage) DecodeFromPtr(p capnp.Ptr) AssignIDMessage {
	return AssignIDMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIDMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIDMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIDMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIDMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIDMessage) NodeID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIDMessage) HasNodeID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIDMessage) SetNodeID(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIDMessage_List is a list of AssignIDMessage.
type AssignIDMessage_List = capnp.StructList[AssignIDMessage]

// NewAssignIDMessage creates a new list of AssignIDMessage.
func NewAssignIDMessage_List(s *capnp.Segment, sz int32) (AssignIDMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIDMessage](l), err
}

// AssignIDMessage_Future is a wrapper for a AssignIDMessage promised by a client call.
type AssignIDMessage_Future struct{ *capnp.Future }

func (f AssignIDMessage_Future) Struct() (AssignIDMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIDMessage(p.Struct()), err
}

type JobResumeMessage capnp.Struct

// JobResumeMessage_TypeID is the unique identifier for the type JobResumeMessage.
const JobResumeMessage_TypeID = 0xb27dd3c6ab583dec

func NewJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func NewRootJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func ReadRootJobResumeMessage(msg *capnp.Message) (JobResumeMessage, error) {
	root, err := msg.Root()
	return JobResumeMessage(root.Struct()), err
}

func (s JobResumeMessage) String() string {
	str, _ := text.Marshal(0xb27dd3c6ab583dec, capnp.Struct(s))
	return str
}

func (s JobResumeMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResumeMessage) DecodeFromPtr(p capnp.Ptr) JobResumeMessage {
	return JobResumeMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResumeMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResumeMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResumeMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResumeMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResumeMessage) Job() (JobInitializationMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s JobResumeMessage) HasJob() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResumeMessage) SetJob(v JobInitializationMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJob sets the job field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s JobResumeMessage) NewJob() (JobInitializationMessage, error) {
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s JobResumeMessage) PreviousState() (PreviousJobState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PreviousJobState(p.Struct()), err
}

func (s JobResumeMessage) HasPreviousState() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobResumeMessage) SetPreviousState(v PreviousJobState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPreviousState sets the previousState field to a newly
// allocated PreviousJobState struct, preferring placement in s's segment.
func (s JobResumeMessage) NewPreviousState() (PreviousJobState, error) {
	ss, err := NewPreviousJobState(capnp.Struct(s).Segment())
	if err != nil {
		return PreviousJobState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// JobResumeMessage_List is a list of JobResumeMessage.
type JobResumeMessage_List = capnp.StructList[JobResumeMessage]

// NewJobResumeMessage creates a new list of JobResumeMessage.
func NewJobResumeMessage_List(s *capnp.Segment, sz int32) (JobResumeMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[JobResumeMessage](l), err
}

// JobResumeMessage_Future is a wrapper for a JobResumeMessage promised by a client call.
type JobResumeMessage_Future struct{ *capnp.Future }

func (f JobResumeMessage_Future) Struct() (JobResumeMessage, error) {
	p, err := f.Future.Ptr()
	return JobResumeMessage(p.Struct()), err
}
func (p JobResumeMessage_Future) Job() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p JobResumeMessage_Future) PreviousState() PreviousJobState_Future {
	return PreviousJobState_Future{Future: p.Future.Field(1, nil)}
}

type PreviousJobState capnp.Struct

// PreviousJobState_TypeID is the unique identifier for the type PreviousJobState.
const PreviousJobState_TypeID = 0xbf41758934cdd6b1

func NewPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func NewRootPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func ReadRootPreviousJobState(msg *capnp.Message) (PreviousJobState, error) {
	root, err := msg.Root()
	return PreviousJobState(root.Struct()), err
}

func (s PreviousJobState) String() string {
	str, _ := text.Marshal(0xbf41758934cdd6b1, capnp.Struct(s))
	return str
}

func (s PreviousJobState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PreviousJobState) DecodeFromPtr(p capnp.Ptr) PreviousJobState {
	return PreviousJobState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PreviousJobState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PreviousJobState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PreviousJobState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PreviousJobState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PreviousJobState) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s PreviousJobState) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s PreviousJobState) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s PreviousJobState) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PreviousJobState) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// PreviousJobState_List is a list of PreviousJobState.
type PreviousJobState_List = capnp.StructList[PreviousJobState]

// NewPreviousJobState creates a new list of PreviousJobState.
func NewPreviousJobState_List(s *capnp.Segment, sz int32) (PreviousJobState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PreviousJobState](l), err
}

// PreviousJobState_Future is a wrapper for a PreviousJobState promised by a client call.
type PreviousJobState_Future struct{ *capnp.Future }

func (f PreviousJobState_Future) Struct() (PreviousJobState, error) {
	p, err := f.Future.Ptr()
	return PreviousJobState(p.Struct()), err
}

type JobInitializationMessage capnp.Struct

// JobInitializationMessage_TypeID is the unique identifier for the type JobInitializationMessage.
const JobInitializationMessage_TypeID = 0xc1cb98e422996a9c

func NewJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func NewRootJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func ReadRootJobInitializationMessage(msg *capnp.Message) (JobInitializationMessage, error) {
	root, err := msg.Root()
	return JobInitializationMessage(root.Struct()), err
}

func (s JobInitializationMessage) String() string {
	str, _ := text.Marshal(0xc1cb98e422996a9c, capnp.Struct(s))
	return str
}

func (s JobInitializationMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobInitializationMessage) DecodeFromPtr(p capnp.Ptr) JobInitializationMessage {
	return JobInitializationMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobInitializationMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobInitializationMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobInitializationMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobInitializationMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobInitializationMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobInitializationMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobInitializationMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobInitializationMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobInitializationMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobInitializationMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobInitializationMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobInitializationMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobInitializationMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobInitializationMessage_List is a list of JobInitializationMessage.
type JobInitializationMessage_List = capnp.StructList[JobInitializationMessage]

// NewJobInitializationMessage creates a new list of JobInitializationMessage.
func NewJobInitializationMessage_List(s *capnp.Segment, sz int32) (JobInitializationMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobInitializationMessage](l), err
}

// JobInitializationMessage_Future is a wrapper for a JobInitializationMessage promised by a client call.
type JobInitializationMessage_Future struct{ *capnp.Future }

func (f JobInitializationMessage_Future) Struct() (JobInitializationMessage, error) {
	p, err := f.Future.Ptr()
	return JobInitializationMessage(p.Struct()), err
}

type JobKillMessage capnp.Struct

// JobKillMessage_TypeID is the unique identifier for the type JobKillMessage.
const JobKillMessage_TypeID = 0xdd67101174f73350

func NewJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func NewRootJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func ReadRootJobKillMessage(msg *capnp.Message) (JobKillMessage, error) {
	root, err := msg.Root()
	return JobKillMessage(root.Struct()), err
}

func (s JobKillMessage) String() string {
	str, _ := text.Marshal(0xdd67101174f73350, capnp.Struct(s))
	return str
}

func (s JobKillMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobKillMessage) DecodeFromPtr(p capnp.Ptr) JobKillMessage {
	return JobKillMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobKillMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobKillMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobKillMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobKillMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobKillMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobKillMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobKillMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobKillMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobKillMessage_List is a list of JobKillMessage.
type JobKillMessage_List = capnp.StructList[JobKillMessage]

// NewJobKillMessage creates a new list of JobKillMessage.
func NewJobKillMessage_List(s *capnp.Segment, sz int32) (JobKillMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobKillMessage](l), err
}

// JobKillMessage_Future is a wrapper for a JobKillMessage promised by a client call.
type JobKillMessage_Future struct{ *capnp.Future }

func (f JobKillMessage_Future) Struct() (JobKillMessage, error) {
	p, err := f.Future.Ptr()
	return JobKillMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping              MessageFromNodeKind = 0
	MessageFromNodeKind_pong              MessageFromNodeKind = 1
	MessageFromNodeKind_jobLog            MessageFromNodeKind = 2
	MessageFromNodeKind_jobProgressReport MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobLog:
		return "jobLog"
	case MessageFromNodeKind_jobProgressReport:
		return "jobProgressReport"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobLog":
		return MessageFromNodeKind_jobLog
	case "jobProgressReport":
		return MessageFromNodeKind_jobProgressReport

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty             MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobLog            MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobProgressReport MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobLogjobProgressReport"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobLog:
		return s[5:11]
	case MessageFromNode_body_Which_jobProgressReport:
		return s[11:28]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobLog() (JobLogMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobLog")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage(p.Struct()), err
}

func (s MessageFromNode_body) HasJobLog() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobLog(v JobLogMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobLog sets the jobLog field to a newly
// allocated JobLogMessage struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobLog() (JobLogMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobLogMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobLogMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobProgressReport() (JobProgressReportMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobProgressReport")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobProgressReportMessage(p.Struct()), err
}

func (s MessageFromNode_body) HasJobProgressReport() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobProgressReport(v JobProgressReportMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobProgressReport sets the jobProgressReport field to a newly
// allocated JobProgressReportMessage struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobProgressReport() (JobProgressReportMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobProgressReportMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobProgressReportMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobLog() JobLogMessage_Future {
	return JobLogMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobProgressReport() JobProgressReportMessage_Future {
	return JobProgressReportMessage_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s JobLogMessage) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobProgressReportMessage capnp.Struct

// JobProgressReportMessage_TypeID is the unique identifier for the type JobProgressReportMessage.
const JobProgressReportMessage_TypeID = 0xd37bd303fd40b22f

func NewJobProgressReportMessage(s *capnp.Segment) (JobProgressReportMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JobProgressReportMessage(st), err
}

func NewRootJobProgressReportMessage(s *capnp.Segment) (JobProgressReportMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JobProgressReportMessage(st), err
}

func ReadRootJobProgressReportMessage(msg *capnp.Message) (JobProgressReportMessage, error) {
	root, err := msg.Root()
	return JobProgressReportMessage(root.Struct()), err
}

func (s JobProgressReportMessage) String() string {
	str, _ := text.Marshal(0xd37bd303fd40b22f, capnp.Struct(s))
	return str
}

func (s JobProgressReportMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobProgressReportMessage) DecodeFromPtr(p capnp.Ptr) JobProgressReportMessage {
	return JobProgressReportMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobProgressReportMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobProgressReportMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobProgressReportMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobProgressReportMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobProgressReportMessage) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobProgressReportMessage) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobProgressReportMessage) Progress() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s JobProgressReportMessage) SetProgress(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

// JobProgressReportMessage_List is a list of JobProgressReportMessage.
type JobProgressReportMessage_List = capnp.StructList[JobProgressReportMessage]

// NewJobProgressReportMessage creates a new list of JobProgressReportMessage.
func NewJobProgressReportMessage_List(s *capnp.Segment, sz int32) (JobProgressReportMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[JobProgressReportMessage](l), err
}

// JobProgressReportMessage_Future is a wrapper for a JobProgressReportMessage promised by a client call.
type JobProgressReportMessage_Future struct{ *capnp.Future }

func (f JobProgressReportMessage_Future) Struct() (JobProgressReportMessage, error) {
	p, err := f.Future.Ptr()
	return JobProgressReportMessage(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cV_l\x14\xd5\x17>\xe7\xde\x9d\xddm\xd3" +
	"ew~\xb3/?\x03n@4B,\xd2n1\xda" +
	"H\xdab!\xec\xd2m\xf6\x16PD\x13\xb3\xc3^\xd7" +
	")\xdd\xb9\x9b\x99\xa9P+\xe1O\xc4\x88\xf1\x1f\x04B" +
	"\xab\x98\xa0\xd1'C\x0c$>hB\x0c\x0f\x8a\x11}" +
	"0ML\xfcCT\xa21\x1a\x8cJ\x8ch\xb1\x8c\xb9" +
	"\xb3\xdb\x9de\x9d\x15ya:\xf7\x9b{\xce\xfd\xbe\xef" +
	"|wW.\xa5\xfd\xa1\xae\xd8\xf3a lH\x09\xbb" +
	"\xe7\xaf\xcc~\x98\xb9\x7fl\x1f\xb0\x05\x88\xee/_\x9c" +
	"K~y\xf6\xb7\xf7@\xc1\x08\x80\xd6I/hwQ" +
	"\xf9\xb4\x8a\xbe\x09\xe8\x1e\x9f\xfc\xeal\xdb\x1d\xab\x8f\x00" +
	"[\x88\xe8\x9a\xf7n\xdd\x95v\xadWa3FPA" +
	"L\x7fB\xdb\x110\xfd\x19M!\xa0\xfb\xc0\xe4\xda\x81" +
	"\xcb\x17\xc7\x8f\x06\xee\xfcg\xe8\x92\xa6(\xf2\x09\x95\x1d" +
	"\x80\xae\x18;\xf1GTi\x9f\x02u\x01\xf1\xb1\x80\xe9" +
	"\x01\xe5\x7f\xa81\x0f\x99SJ\x80\xee\xe7K>\xe8\xf9" +
	"u\xcf\xd5\xe3A\xdb\xa6'\x14\x82\xda~\x0f\xbd\xd7\xdb" +
	"\xb7\xdecP\x13\xdf(\x17\xb4\x9f<\xf0\x0f\x1e\xf8\xe2" +
	"\xea-o\xbc?\xb3\xeb\x14\xa8\x0b\x1a\xb1D\"\x96\x85" +
	"g\xb5Ua\xf9\xd4\x15\x96\xd8\x93\x9f~\xdcs`|" +
	"\xe0\xdd\xc0\x8d\x0f\x86g\xb5\x97=\xf0\xb4\x07>6:" +
	"\xbd\xe4\xdb\xa9sg\x9a\xc1r\xe74FzQS#" +
	"\x12\x1d\x8bH\x96o?\xd5?Gg&g\x9a\xd0!" +
	"\x09>!\xc1\xa7=\xf0\xdb\x11\xb9\xf5\xe8\xc3\xefL>" +
	"\xf9\xca\xd73\x81t,\x8av\xa3\xd6\x19\xf5\xfa\x8fJ" +
	"t>}\xd9Q\x13\xa5\xf3M'\xf4\x9a~6\xfa\xa3" +
	"6\xeda\x8fD\xfb\x00\xdd\xfd/>\xf4\xfds\x87o" +
	"\xf9\xee\x1f\x92\xbc\x15%\xa8\x9d\xf1\x90\xa7\xa3\xbb\x01\xdd" +
	"\xb9\xa3\xb8\xb0}\xf8\xa3\x9f\x81\xdd\x88\x0d\xbaK[P" +
	"\xc4\xf4\\\xf4\x06\x04\xd4\x946y\xb8\xcd\x8fO\xbd\xa4" +
	",\xbe\xe9\xf7\xa0\x0e^o\xbb\xa4\x9dl\x93O'\xda" +
	"\xfa\xa0\xd3-s\xdb.\x94\xf8\x0a\xb2\xadP1+\xbd" +
	"Y\xa1\x0f\x89R\x8e\xdbv\xa4P\xe2yD\xd6AC" +
	"\x00!\x04P\xd7\xae\x01`\xfd\x14\xd9\x10A\x151\x89" +
	"\xf2eF\x07`\xeb)\xb2M\x04\x91$\x91\x00\xa8L" +
	"\x02\x87(\xb2-\x04w\x8f\x89\xd2\x06\xc3,b\x04\x08" +
	"F\x00\xdd\x1d\xc2\xda\xce\xad\x8c\x09\x91\"\xdf9\xffv" +
	"\xf76a:\xdct0\x06\x04c\x80\xf5\xb6h\xb5\xad" +
	"\\\xf5\xcfMbX\x14\xf9\x0a]\x14'\x00X\x92\x86" +
	":\\\xb7\xda\xc6\xaen\x00\xb6\x93\"{\x82`\x0c\xaf" +
	"\xba\xd5F\xf6f\x01\xd8\x1e\x8a\xec\x19\x8212\xe7&" +
	"\x91\x02\xa8\x07\xe4\xdb\xa7(\xb2\xc3\x04c\xf4/7\x89" +
	"!\x00\xf5\xe0\x08\x00{\x81\";F0\x16\xba\xe2&" +
	"Q\x01P\xa7%v\x8a\"{\x8d`\x8a\x97+\xce\x04" +
	"\x84\xdd\x82m\x1b%33\x08\x00\x98\xf0\xd9\x06\xc4\x04" +
	"\xa0k;\x05\xcb\xc9\x0a\xbd\xbaZ\xb7em\xd5\xe2\xf6" +
	"x\x99g\x05\xa0\x8e\x09\x7f\x1aj\xab\x05]4|[" +
	"wRm\xb5I\xab\x1a)\xeb,\x91*K^\xa4Z" +
	"\xd1\xbaZ\xcb\x96\x03\xb0\xa5\x14\xd9J\x82\xf2\x9f\xef " +
	"\xb5s9\x90\xf8v)J\xdc\x0f\x05@\x8c\x03\xc6%" +
	"\xb7-\xd8_g\x09\xaf\xce\x06\xc3\xc4\xa2,\x96\xf0H" +
	"\x96\x85\x10\xd5\xc5\xf2?\xa2\xfe\xbf\x17\x00\xa9\xaa\x1e\x02" +
	"\x88W\x0c\xb3\x14\xaf\x08\xb3\xd47\xea\xd9\xca\x1d\x15z" +
	"\xde\x12%\x0b\xb9m\x8f\xf0\x8a\xb0\xd0i\xae\x95\x15\xfa" +
	"FI /\xd6\xaaB\xd3\xb1\xa4\xdfn\xa5\xc8z\xe4" +
	"\xb1\xaa\xe2wI\xf1o\xa3\xc8\xee$\xcd\xfe\x8a\x02\xc1" +
	"(`jT\xe8\x99A\xec\x00\x82\x1d-\x89\xdc$\x86" +
	"#\xd7\xa7\xb1\x9e\xcf\xd7\xd0X\x1f\xe4 \x1a\xfd\xd9\x1a" +
	"\xf1\xd4\xcf\xf5U\x17\x9a*-\xf1+\xd5\xc7\xab\xd3\xf2" +
	"\x8f\x16\x19\x15z\x80\xa3*\x16\x7f\xd4\x10\xe36\xa46" +
	":\x05\x87c\xc2\xcf\xcd`\xdf\xe4k\x1fdE\x9f\xee" +
	"}\xd2\xd4G6\x80\xe1\xa7\x01X\x0fE\xd6OdA" +
	"Q\xb2\xb8mK\x93\xb6\x03\xc1v@\xd70\x1dnU" +
	",\x8e\x0e\xb7\xbc=\x01Z\xcdrV\xe8\x19\xd3p\x8c" +
	"\xc2\x98\xf1X\xc11\x84\xd9HGC\xdaH\xa1\x07)" +
	"\xb2\xbc\xdfF\xae\xdb\x0f\x1b\x95`-m\xf6\x01\xb0<" +
	"E\xf6\xe0\x7fT\xdf\xeb\xbfP^\x83\x13\x0e\xbfG\x14" +
	"\xf9\xbfu\x9a\xaf\x9d\xd5s\xab\xd3B\xb8\x06K\xd6\x85" +
	"\xeb\x92,\xae\xa4\xc8\xee&-2\xef\x1a\x1e\xe7\xdf5" +
	"u\xb0\xbe`\x16\xedG\x0a\xdb\xf9\x08\xb7+\xc2,\xe6" +
	"x*\xa8\x81\xad\x01\x8a5\xd67\xc7\xcb\xf7\xc9\x16\x80" +
	"Zv\xbd\x94)\x8a|\xb8P\xe6\xb2|\x8b\xc1\xc8\x0a" +
	"}\x8316\x96\xe3v|\xbej\xa8^5&\xc5\x88" +
	"RdI\xd2j\xbe\x82\xd2[^\x06\xdeLW\xd5[" +
	"UM\x8f\xcejz\xdc\x9c\xf5\xd2c\xb1\x05\x80!u" +
	"Q\xb61D\x1ac\xd75L\xc3\x91\xe4@j\xa3\xa4" +
	"\xa71t\xaf\x93^+tA\x8b\x13\xd2h\xf5\xcbc" +
	"m\xb7\x7f\xb1\xf9\x97G\xa6\xd77\xa0\x7fy\xe4\x0e\xf9" +
	"n\x9b\xbf\x10j\xf1\x86\x09\xff\x97^m\xf2\x02\x02\x0f" +
	"\x13\xfe\x8f\x8f\xe0\xf9\x1c\xa8\x9d\xb3Q\xec\x06\xda{}" +
	"\xda\xfb\xa4\x86\x99\xc1y\xff\xfe\x1d\x00\x00\xff\xff\xed|" +
	"\xda+"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb27dd3c6ab583dec,
			0xbf41758934cdd6b1,
			0xc1cb98e422996a9c,
			0xd37bd303fd40b22f,
			0xd3e0a1867bba666a,
			0xdd67101174f73350,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xf62321059b987c55,
		},
		Compressed: true,
	})
}
