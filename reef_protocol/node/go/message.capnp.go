// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignId      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
	MessageToNodeKind_abortJob      MessageToNodeKind = 5
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignId:
		return "assignId"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"
	case MessageToNodeKind_abortJob:
		return "abortJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignId":
		return MessageToNodeKind_assignId
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob
	case "abortJob":
		return MessageToNodeKind_abortJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty    MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignId MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob MessageToNode_body_Which = 2
	MessageToNode_body_Which_abortJob MessageToNode_body_Which = 3
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIdstartJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignId:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_abortJob:
		return s[21:29]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignId() (AssignIdMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignId")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIdMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignId() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignId(v AssignIdMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignId sets the assignId field to a newly
// allocated AssignIdMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignId() (AssignIdMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIdMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIdMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobStartMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStartMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobStartMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobStartMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobStartMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobStartMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobStartMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobAbortMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobAbortMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobAbortMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobAbortMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobAbortMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobAbortMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobAbortMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignId() AssignIdMessage_Future {
	return AssignIdMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobStartMessage_Future {
	return JobStartMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobAbortMessage_Future {
	return JobAbortMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIdMessage capnp.Struct

// AssignIdMessage_TypeID is the unique identifier for the type AssignIdMessage.
const AssignIdMessage_TypeID = 0xb00291a156771b6b

func NewAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func NewRootAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func ReadRootAssignIdMessage(msg *capnp.Message) (AssignIdMessage, error) {
	root, err := msg.Root()
	return AssignIdMessage(root.Struct()), err
}

func (s AssignIdMessage) String() string {
	str, _ := text.Marshal(0xb00291a156771b6b, capnp.Struct(s))
	return str
}

func (s AssignIdMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIdMessage) DecodeFromPtr(p capnp.Ptr) AssignIdMessage {
	return AssignIdMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIdMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIdMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIdMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIdMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIdMessage) NodeId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIdMessage) HasNodeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIdMessage) SetNodeId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIdMessage_List is a list of AssignIdMessage.
type AssignIdMessage_List = capnp.StructList[AssignIdMessage]

// NewAssignIdMessage creates a new list of AssignIdMessage.
func NewAssignIdMessage_List(s *capnp.Segment, sz int32) (AssignIdMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIdMessage](l), err
}

// AssignIdMessage_Future is a wrapper for a AssignIdMessage promised by a client call.
type AssignIdMessage_Future struct{ *capnp.Future }

func (f AssignIdMessage_Future) Struct() (AssignIdMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIdMessage(p.Struct()), err
}

type JobStartMessage capnp.Struct

// JobStartMessage_TypeID is the unique identifier for the type JobStartMessage.
const JobStartMessage_TypeID = 0xc1654f845d3e3fd8

func NewJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return JobStartMessage(st), err
}

func NewRootJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return JobStartMessage(st), err
}

func ReadRootJobStartMessage(msg *capnp.Message) (JobStartMessage, error) {
	root, err := msg.Root()
	return JobStartMessage(root.Struct()), err
}

func (s JobStartMessage) String() string {
	str, _ := text.Marshal(0xc1654f845d3e3fd8, capnp.Struct(s))
	return str
}

func (s JobStartMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartMessage) DecodeFromPtr(p capnp.Ptr) JobStartMessage {
	return JobStartMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobStartMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStartMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s JobStartMessage) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStartMessage) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStartMessage) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s JobStartMessage) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s JobStartMessage) HasDataset() bool {
	return capnp.Struct(s).Bit(64)
}

func (s JobStartMessage) SetHasDataset(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s JobStartMessage) DatasetId() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s JobStartMessage) HasDatasetId() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s JobStartMessage) DatasetIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s JobStartMessage) SetDatasetId(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// JobStartMessage_List is a list of JobStartMessage.
type JobStartMessage_List = capnp.StructList[JobStartMessage]

// NewJobStartMessage creates a new list of JobStartMessage.
func NewJobStartMessage_List(s *capnp.Segment, sz int32) (JobStartMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return capnp.StructList[JobStartMessage](l), err
}

// JobStartMessage_Future is a wrapper for a JobStartMessage promised by a client call.
type JobStartMessage_Future struct{ *capnp.Future }

func (f JobStartMessage_Future) Struct() (JobStartMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartMessage(p.Struct()), err
}

type JobAbortMessage capnp.Struct

// JobAbortMessage_TypeID is the unique identifier for the type JobAbortMessage.
const JobAbortMessage_TypeID = 0xd98a9e5f84dacc76

func NewJobAbortMessage(s *capnp.Segment) (JobAbortMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobAbortMessage(st), err
}

func NewRootJobAbortMessage(s *capnp.Segment) (JobAbortMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobAbortMessage(st), err
}

func ReadRootJobAbortMessage(msg *capnp.Message) (JobAbortMessage, error) {
	root, err := msg.Root()
	return JobAbortMessage(root.Struct()), err
}

func (s JobAbortMessage) String() string {
	str, _ := text.Marshal(0xd98a9e5f84dacc76, capnp.Struct(s))
	return str
}

func (s JobAbortMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobAbortMessage) DecodeFromPtr(p capnp.Ptr) JobAbortMessage {
	return JobAbortMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobAbortMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobAbortMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobAbortMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobAbortMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobAbortMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobAbortMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobAbortMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobAbortMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobAbortMessage_List is a list of JobAbortMessage.
type JobAbortMessage_List = capnp.StructList[JobAbortMessage]

// NewJobAbortMessage creates a new list of JobAbortMessage.
func NewJobAbortMessage_List(s *capnp.Segment, sz int32) (JobAbortMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobAbortMessage](l), err
}

// JobAbortMessage_Future is a wrapper for a JobAbortMessage promised by a client call.
type JobAbortMessage_Future struct{ *capnp.Future }

func (f JobAbortMessage_Future) Struct() (JobAbortMessage, error) {
	p, err := f.Future.Ptr()
	return JobAbortMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
	MessageFromNodeKind_jobResult    MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"
	case MessageFromNodeKind_jobResult:
		return "jobResult"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync
	case "jobResult":
		return MessageFromNodeKind_jobResult

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobResult    MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSyncjobResult"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]
	case MessageFromNode_body_Which_jobResult:
		return s[17:26]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobResult() (JobResult, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobResult")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResult(p.Struct()), err
}

func (s MessageFromNode_body) HasJobResult() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobResult(v JobResult) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobResult sets the jobResult field to a newly
// allocated JobResult struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobResult() (JobResult, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobResult(capnp.Struct(s).Segment())
	if err != nil {
		return JobResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobResult() JobResult_Future {
	return JobResult_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

type ResultContentType uint16

// ResultContentType_TypeID is the unique identifier for the type ResultContentType.
const ResultContentType_TypeID = 0xcb3158a325d2d5bb

// Values of ResultContentType.
const (
	ResultContentType_i32         ResultContentType = 0
	ResultContentType_bytes       ResultContentType = 1
	ResultContentType_stringPlain ResultContentType = 2
	ResultContentType_stringJSON  ResultContentType = 3
)

// String returns the enum's constant name.
func (c ResultContentType) String() string {
	switch c {
	case ResultContentType_i32:
		return "i32"
	case ResultContentType_bytes:
		return "bytes"
	case ResultContentType_stringPlain:
		return "stringPlain"
	case ResultContentType_stringJSON:
		return "stringJSON"

	default:
		return ""
	}
}

// ResultContentTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultContentTypeFromString(c string) ResultContentType {
	switch c {
	case "i32":
		return ResultContentType_i32
	case "bytes":
		return ResultContentType_bytes
	case "stringPlain":
		return ResultContentType_stringPlain
	case "stringJSON":
		return ResultContentType_stringJSON

	default:
		return 0
	}
}

type ResultContentType_List = capnp.EnumList[ResultContentType]

func NewResultContentType_List(s *capnp.Segment, sz int32) (ResultContentType_List, error) {
	return capnp.NewEnumList[ResultContentType](s, sz)
}

type JobResult capnp.Struct

// JobResult_TypeID is the unique identifier for the type JobResult.
const JobResult_TypeID = 0x89d5e64a8e7e9034

func NewJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func NewRootJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func ReadRootJobResult(msg *capnp.Message) (JobResult, error) {
	root, err := msg.Root()
	return JobResult(root.Struct()), err
}

func (s JobResult) String() string {
	str, _ := text.Marshal(0x89d5e64a8e7e9034, capnp.Struct(s))
	return str
}

func (s JobResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResult) DecodeFromPtr(p capnp.Ptr) JobResult {
	return JobResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResult) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobResult) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobResult) Success() bool {
	return capnp.Struct(s).Bit(16)
}

func (s JobResult) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s JobResult) ContentType() ResultContentType {
	return ResultContentType(capnp.Struct(s).Uint16(4))
}

func (s JobResult) SetContentType(v ResultContentType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s JobResult) Contents() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobResult) HasContents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResult) SetContents(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobResult_List is a list of JobResult.
type JobResult_List = capnp.StructList[JobResult]

// NewJobResult creates a new list of JobResult.
func NewJobResult_List(s *capnp.Segment, sz int32) (JobResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobResult](l), err
}

// JobResult_Future is a wrapper for a JobResult promised by a client call.
type JobResult_Future struct{ *capnp.Future }

func (f JobResult_Future) Struct() (JobResult, error) {
	p, err := f.Future.Ptr()
	return JobResult(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cVkl\x14U\x14>\xe7\xde}\xa7\xdb\xed" +
	"8k\xe2\x83\xd8H\xc4Hc\x09m\xc1X\"BA" +
	"\x08]h\xe9m+j\x85\xe0l\xe7\xba\x9dvwf" +
	"\x9d\x99\x0a\x9b\x06!\x04\x8c\x90\xc8#\xb1A\xfca@" +
	"\xc3O\xa3&b\x8c\x86\x04\x8c\x06\x14\xfe\xa8\x90(B" +
	"$DD\x13\x13\xb11\xd1\xa80\xe6\xce\x0c;\xd3v" +
	"\x0b\xfe\xda\xfb8{\x1e\xdf\xf9\xcewg\xfe\x18]\x1a" +
	"iI\xef\x8d\x01ak\xa21\xe7\xe2?\x7f\x7f\xd9\xf9" +
	"Lq;\xb0zD\xe7\xda\xf7\xa7\xb3\x17N\xfe\xf19" +
	"D1\x0e 7\xd3\xcbr;\x15\xab\x85t\x13\xa0\xb3" +
	"`\xdfK{r?\x9d\xdbU\xd3x?\xfdT>\xe8" +
	"\x1a\x8f\xd3\xab\x80\xce\xa1\xb1\x1fN&\x1fY<\x0el" +
	"\x16\xa2\xa3\xaf\x1b\xd8\xd2\xe6\x98o\xc1\x93\x18\xc7\x08b" +
	"\xdbh$\x85\x80\xf2\x96\x88\xb0}vlE\xc7\x9f\xbf" +
	"\x8e\x1e\xa8\xe9xCtB\xd6\xa2b\xc5\xa3\"\x0b\xa3" +
	"\xf8\xce_\x89h\xeau\x90\xeaI`\x0b\xd8v$z" +
	"\x07\xcaG]\xcb\xf7\xa3\x05@\xe7\xfc\xecS\x0b~\xdf" +
	"v\xe3P-\xb7m\x17\xa3\x04\xe5_\\\xeb+\xae\xdf" +
	"j\x8a\xb5\x92X\x11\xbb,\xb3\x98Xu\xc5\x84\xf1\xc8" +
	"\xbd\x9b\xd6\x1d\xdeO\xde\x03\xa9~\x9a\xed\xab\xb1\x09\xf9" +
	"\xa0k;\x1e[\x02\xe8|\xbb\xe4\xf1\x0d;\xd6\xf2\x13" +
	"\xc2q(\xe3hD\x98\x1c\x8dM\xc8'\x84q\xdb\xb1" +
	"\xd8^\x04t>9\xf7\xf5\x9c\xb7\x9fn9=\xad<" +
	"%AP.%\xc4\x9f\xb4\x84(o\xf8\xf9\x8f\xc7^" +
	">|\xe9\x9b\x9a\xe5\x8d'ZQ>\xe2Z\x1fN\x88" +
	"\x8c_<s~\xc7\xc67w\x7fW+\xe3hrB" +
	"\x96\x92b\x95N\x8a\x8cw\xbe\xb1\xf1\xea\x9e\xd7\x1e\xbc" +
	"2-\x87\xe6$A\xb9\xdd\xb5\\\x98<\x00\xe8\\?" +
	"\x80\xb3R\xddg~\x03v\x1f\x86\xfa(\xbaL\x11\xdb" +
	"v%\xef\x11]\xde\x9f|\x17\xd0\x99\xfd\xe1\xf1\xc4\xba" +
	"\x89&gj\xbeD\xb8kI\x9d\x97\x17\xa7\xc4\xaa=" +
	"u\x15\x9a\x9d\x12\xb7,\xa5\xc0\xe7\x91A\xa5\xac\x97\x17" +
	"\xe5\x8c\xfc\x1a\xa3\xd0\xc5-+\xae\x14x\x0f\"K\xd0" +
	"\x08@\x04\x01\xa4\xb9\xcb\x00\xd8\x03\x14\xd9|\x82\x88Y" +
	"\x14g\xcd\xe2\xec!\x8al\x01\xc1\xadE\xa3\xb0Z\xd3" +
	"U\x8c\x03\xc18\xe0\xd6AC\xb7\xb9nc\x1a\x08\xa6" +
	"\x01k\xc4\xea\xe5\xd6h\xd1\x06\x11\xa7\xa1\x1aG\xc9\x03" +
	"\xb0\xe7(\xb2\"A\x09\x1b\xbc@\x9a\x08\xa4Rde" +
	"\x82\x12!Y$\x00RIX\x16)\xb2\xcd\x04\x91f" +
	"\x91\x02H\xa39\x00fSd\xdb\x08:\x9b\x0cs\x84" +
	"\x9b\x9d:\xc4U\xbe\xb9\x9a\x975:8\xc8-\x0b\x11" +
	"\x08\x0a*\xf8y\xf6C\xbcR\xe6\x98\x09\xa8\x01\x88\x99" +
	"\xe0\xde\x02\x80i\xb5P\xaf\x96.o\xdbot\x1b*" +
	"\x9f\x977\xd4\x0a\x80(\xa9\xceq\xbc\xfc\x95V\x00\xb6" +
	"\x9e\"\x1b\"\x98\xc6\x1b\x8eW\x00\xcf\x05U\xa5\xc9u" +
	"\xc7+\xa1\x94\x0b\xcaJ\xd3\x7f\x9d,F\xa6\x14\xd6\xc8" +
	"Ke\xbb\x021G\xb1,\xad\xa0w\xaa\"\xb5\x86`" +
	"Z\x00\xb1\x01\xd0\xb1l\xc5\xb4sF\xde\xbb\xad\xce\x87" +
	"\x7f\xab\xe4\x8d\xd0m\x95\xb7\xfe\xed\x94f\xf9\x05\xae4" +
	"\x8d\xc6\x92\xa8q\x0a5\x9a\xc2\xd4\xc0\x10_\xa5\xe6&" +
	" \x99\x11A\x8bL )\x1e\xb0\x19\x81\xd3\x0cH\xae" +
	"4\x0d7\xcejMG\xd5\xe5\x87\x0b\x98\x08\x84(\xdd" +
	"/~\x88t\xf70\x00R\xe9\xce^\x80LY\xd3\x0b" +
	"\x99\xb2\xa1\x17\x9ca#\xdfg+6\x87L_E\x1f" +
	"\x14[\x97f\x80\xf6\xd4X9\xd7\xd2\xb4\xb9\xeaG\x85" +
	")e\xe5\x03v\xdfd|\x8bh\xe4\xc3\x14\xd9\xa3\xd3" +
	"\xf8\x95\x00\x82\x09\xc0\xc6a#\xdf\xa9b\x1d\x10\xac\x9b" +
	"\x11\xc8~\xa3;~{\x18\xab\xe2>\x09\xc6\xaal\xd4" +
	"\x82\xd1\x0f\xd3\xe1\x13\xa3\x8b7\xba\xe7\"P\xa4\x1a(" +
	"\xbd\x08\x80%(\xb2,\xc1%\xba\xa1\xf2N\xf5\x16S" +
	"\xeab\x14v4\xab\xea\xe8\xa8@\xe8\x03\x8a\xecx\x80" +
	"\xd01\x81\xd0G\x14\xd9gbT\xd1c\xfa\x89\xed\x00" +
	"\xec8Ev\x86\xa0D\xd1#\xfa\x17\x82\xd2\xa7(\xb2" +
	"\xb3\x04\xa5\x08\xf1x\xfe\xd5n\x00v\x96\"\xbbDP" +
	"\x8a.\xcdb\x14@\xba8\x00\xc0.Pd?\x13\x94" +
	"b4\x8b1\x00\xe9J/\x00\xfb\x91\"\xbb\xf6?[" +
	"Q6\x8d\x82\xa9\x94\x96a\xc5\xe6\xcb\x0d\x95\x07\xe3\xec" +
	"\xdep\xcb\x1d\xf1\x14\x10L\x01:\x9ans\xb3lr" +
	"\xb4\xb9\xe9\x11*\xb0\x1fR\xac'\x14[\xb1\x80r\xbb" +
	"\xaa#\xaa8\xe1v'\xe0\xf4\xee\xfb\x8c\xf3\x04o\xb9" +
	"/8\x95\xb2\xc78\x9f\xdb\xb3=n\xb7z\xdc\xce{" +
	"\xdc\x1e\x00\x88km\xad\x8d\xf9\x8a\xcd-\xc7\xb2MM" +
	"/\xf4\x14!\xaeh\xba\xbf\xcb\xf5\x01]\xdb=5\xd2" +
	"*EW\xad!e\x84\xf7r\xabl\xe8\x93\x88\x10b" +
	"\xdc@\x0d\x86\x8b\xae\xcc\xa7\xc8\x1e#\xe8\xe8\xa3\xa5\xa7" +
	"\x04\xb2@M\xeb\xa6\x80:\x821\xddJ\x89\x0b\xb4f" +
	"\xa0y\xce\xc8w\x08}\x99\x81\x7f\xad\x01\xfff\x18\x97" +
	"Z\xc2*^\x17\x17\xb0\xbb\\\xc0:<1h\xf7\xc4" +
	"@\xa4\x8dTj6\x010\"\xcd\x15\xbb\xa84'7" +
	"I\x1aBr\xe9h\xbaf\x0b\x90\xa0\xb1O\xc0\x14\x16" +
	"\xcb\xb04\xdeF\x9f\xe6\xe5\x0d\xaaVX]H\xeaW" +
	"\x88\xe2\x96Rdk\xc2R\xdf9\x0c\xc0VQd\xfd" +
	"a\xa9g\x82\xc2=\x14\xd9\xfa\x90\xa8O\x160l\x08" +
	"^t_\x9bC\x92\x86\x0d\xc1\xe7bm\xe5\xce\xf9\xde" +
	"\xfa*T\x1f\xbc\xd5K\xeb\xb7_\x13\xed\x1f\xa2\xc8l" +
	"\x82\xe8?\xb4/4\xf9/\xd2+\xa1\xe9\xdd)\xfe\xbd" +
	"\x83\"\xdb7\xd3K[k\xac2E\xa3`a=`" +
	"\x0fEl\x08>\x8c\x01\xc5au\xe8 ns\xf3\xe6" +
	"\xb8\xfd\x17\x00\x00\xff\xffv\x8b\x05p"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x89d5e64a8e7e9034,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb00291a156771b6b,
			0xc1654f845d3e3fd8,
			0xcb3158a325d2d5bb,
			0xd3e0a1867bba666a,
			0xd98a9e5f84dacc76,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
