// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignID      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignID:
		return "assignID"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignID":
		return MessageToNodeKind_assignID
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty     MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignID  MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob  MessageToNode_body_Which = 2
	MessageToNode_body_Which_resumeJob MessageToNode_body_Which = 3
	MessageToNode_body_Which_abortJob  MessageToNode_body_Which = 4
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIDstartJobresumeJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignID:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_resumeJob:
		return s[21:30]
	case MessageToNode_body_Which_abortJob:
		return s[30:38]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignID() (AssignIDMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignID")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIDMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignID() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignID(v AssignIDMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignID sets the assignID field to a newly
// allocated AssignIDMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignID() (AssignIDMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIDMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIDMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobInitializationMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobInitializationMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobInitializationMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) ResumeJob() (JobResumeMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != resumeJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResumeMessage(p.Struct()), err
}

func (s MessageToNode_body) HasResumeJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetResumeJob(v JobResumeMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResumeJob sets the resumeJob field to a newly
// allocated JobResumeMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewResumeJob() (JobResumeMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobResumeMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobResumeMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobKillMessage, error) {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobKillMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobKillMessage) error {
	capnp.Struct(s).SetUint16(2, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobKillMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobKillMessage, error) {
	capnp.Struct(s).SetUint16(2, 4)
	ss, err := NewJobKillMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobKillMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignID() AssignIDMessage_Future {
	return AssignIDMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) ResumeJob() JobResumeMessage_Future {
	return JobResumeMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobKillMessage_Future {
	return JobKillMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIDMessage capnp.Struct

// AssignIDMessage_TypeID is the unique identifier for the type AssignIDMessage.
const AssignIDMessage_TypeID = 0xf62321059b987c55

func NewAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func NewRootAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func ReadRootAssignIDMessage(msg *capnp.Message) (AssignIDMessage, error) {
	root, err := msg.Root()
	return AssignIDMessage(root.Struct()), err
}

func (s AssignIDMessage) String() string {
	str, _ := text.Marshal(0xf62321059b987c55, capnp.Struct(s))
	return str
}

func (s AssignIDMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIDMessage) DecodeFromPtr(p capnp.Ptr) AssignIDMessage {
	return AssignIDMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIDMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIDMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIDMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIDMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIDMessage) NodeID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIDMessage) HasNodeID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIDMessage) SetNodeID(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIDMessage_List is a list of AssignIDMessage.
type AssignIDMessage_List = capnp.StructList[AssignIDMessage]

// NewAssignIDMessage creates a new list of AssignIDMessage.
func NewAssignIDMessage_List(s *capnp.Segment, sz int32) (AssignIDMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIDMessage](l), err
}

// AssignIDMessage_Future is a wrapper for a AssignIDMessage promised by a client call.
type AssignIDMessage_Future struct{ *capnp.Future }

func (f AssignIDMessage_Future) Struct() (AssignIDMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIDMessage(p.Struct()), err
}

type JobResumeMessage capnp.Struct

// JobResumeMessage_TypeID is the unique identifier for the type JobResumeMessage.
const JobResumeMessage_TypeID = 0xb27dd3c6ab583dec

func NewJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func NewRootJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func ReadRootJobResumeMessage(msg *capnp.Message) (JobResumeMessage, error) {
	root, err := msg.Root()
	return JobResumeMessage(root.Struct()), err
}

func (s JobResumeMessage) String() string {
	str, _ := text.Marshal(0xb27dd3c6ab583dec, capnp.Struct(s))
	return str
}

func (s JobResumeMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResumeMessage) DecodeFromPtr(p capnp.Ptr) JobResumeMessage {
	return JobResumeMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResumeMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResumeMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResumeMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResumeMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResumeMessage) Job() (JobInitializationMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s JobResumeMessage) HasJob() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResumeMessage) SetJob(v JobInitializationMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJob sets the job field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s JobResumeMessage) NewJob() (JobInitializationMessage, error) {
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s JobResumeMessage) PreviousState() (PreviousJobState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PreviousJobState(p.Struct()), err
}

func (s JobResumeMessage) HasPreviousState() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobResumeMessage) SetPreviousState(v PreviousJobState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPreviousState sets the previousState field to a newly
// allocated PreviousJobState struct, preferring placement in s's segment.
func (s JobResumeMessage) NewPreviousState() (PreviousJobState, error) {
	ss, err := NewPreviousJobState(capnp.Struct(s).Segment())
	if err != nil {
		return PreviousJobState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// JobResumeMessage_List is a list of JobResumeMessage.
type JobResumeMessage_List = capnp.StructList[JobResumeMessage]

// NewJobResumeMessage creates a new list of JobResumeMessage.
func NewJobResumeMessage_List(s *capnp.Segment, sz int32) (JobResumeMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[JobResumeMessage](l), err
}

// JobResumeMessage_Future is a wrapper for a JobResumeMessage promised by a client call.
type JobResumeMessage_Future struct{ *capnp.Future }

func (f JobResumeMessage_Future) Struct() (JobResumeMessage, error) {
	p, err := f.Future.Ptr()
	return JobResumeMessage(p.Struct()), err
}
func (p JobResumeMessage_Future) Job() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p JobResumeMessage_Future) PreviousState() PreviousJobState_Future {
	return PreviousJobState_Future{Future: p.Future.Field(1, nil)}
}

type PreviousJobState capnp.Struct

// PreviousJobState_TypeID is the unique identifier for the type PreviousJobState.
const PreviousJobState_TypeID = 0xbf41758934cdd6b1

func NewPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func NewRootPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func ReadRootPreviousJobState(msg *capnp.Message) (PreviousJobState, error) {
	root, err := msg.Root()
	return PreviousJobState(root.Struct()), err
}

func (s PreviousJobState) String() string {
	str, _ := text.Marshal(0xbf41758934cdd6b1, capnp.Struct(s))
	return str
}

func (s PreviousJobState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PreviousJobState) DecodeFromPtr(p capnp.Ptr) PreviousJobState {
	return PreviousJobState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PreviousJobState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PreviousJobState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PreviousJobState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PreviousJobState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PreviousJobState) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s PreviousJobState) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s PreviousJobState) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s PreviousJobState) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PreviousJobState) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// PreviousJobState_List is a list of PreviousJobState.
type PreviousJobState_List = capnp.StructList[PreviousJobState]

// NewPreviousJobState creates a new list of PreviousJobState.
func NewPreviousJobState_List(s *capnp.Segment, sz int32) (PreviousJobState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PreviousJobState](l), err
}

// PreviousJobState_Future is a wrapper for a PreviousJobState promised by a client call.
type PreviousJobState_Future struct{ *capnp.Future }

func (f PreviousJobState_Future) Struct() (PreviousJobState, error) {
	p, err := f.Future.Ptr()
	return PreviousJobState(p.Struct()), err
}

type JobInitializationMessage capnp.Struct

// JobInitializationMessage_TypeID is the unique identifier for the type JobInitializationMessage.
const JobInitializationMessage_TypeID = 0xc1cb98e422996a9c

func NewJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func NewRootJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func ReadRootJobInitializationMessage(msg *capnp.Message) (JobInitializationMessage, error) {
	root, err := msg.Root()
	return JobInitializationMessage(root.Struct()), err
}

func (s JobInitializationMessage) String() string {
	str, _ := text.Marshal(0xc1cb98e422996a9c, capnp.Struct(s))
	return str
}

func (s JobInitializationMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobInitializationMessage) DecodeFromPtr(p capnp.Ptr) JobInitializationMessage {
	return JobInitializationMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobInitializationMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobInitializationMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobInitializationMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobInitializationMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobInitializationMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobInitializationMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobInitializationMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobInitializationMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobInitializationMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobInitializationMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobInitializationMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobInitializationMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobInitializationMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobInitializationMessage_List is a list of JobInitializationMessage.
type JobInitializationMessage_List = capnp.StructList[JobInitializationMessage]

// NewJobInitializationMessage creates a new list of JobInitializationMessage.
func NewJobInitializationMessage_List(s *capnp.Segment, sz int32) (JobInitializationMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobInitializationMessage](l), err
}

// JobInitializationMessage_Future is a wrapper for a JobInitializationMessage promised by a client call.
type JobInitializationMessage_Future struct{ *capnp.Future }

func (f JobInitializationMessage_Future) Struct() (JobInitializationMessage, error) {
	p, err := f.Future.Ptr()
	return JobInitializationMessage(p.Struct()), err
}

type JobKillMessage capnp.Struct

// JobKillMessage_TypeID is the unique identifier for the type JobKillMessage.
const JobKillMessage_TypeID = 0xdd67101174f73350

func NewJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func NewRootJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func ReadRootJobKillMessage(msg *capnp.Message) (JobKillMessage, error) {
	root, err := msg.Root()
	return JobKillMessage(root.Struct()), err
}

func (s JobKillMessage) String() string {
	str, _ := text.Marshal(0xdd67101174f73350, capnp.Struct(s))
	return str
}

func (s JobKillMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobKillMessage) DecodeFromPtr(p capnp.Ptr) JobKillMessage {
	return JobKillMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobKillMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobKillMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobKillMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobKillMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobKillMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobKillMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobKillMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobKillMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobKillMessage_List is a list of JobKillMessage.
type JobKillMessage_List = capnp.StructList[JobKillMessage]

// NewJobKillMessage creates a new list of JobKillMessage.
func NewJobKillMessage_List(s *capnp.Segment, sz int32) (JobKillMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobKillMessage](l), err
}

// JobKillMessage_Future is a wrapper for a JobKillMessage promised by a client call.
type JobKillMessage_Future struct{ *capnp.Future }

func (f JobKillMessage_Future) Struct() (JobKillMessage, error) {
	p, err := f.Future.Ptr()
	return JobKillMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
	MessageFromNodeKind_jobResult    MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"
	case MessageFromNodeKind_jobResult:
		return "jobResult"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync
	case "jobResult":
		return MessageFromNodeKind_jobResult

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobResult    MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSyncjobResult"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]
	case MessageFromNode_body_Which_jobResult:
		return s[17:26]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobResult() (JobResult, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobResult")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResult(p.Struct()), err
}

func (s MessageFromNode_body) HasJobResult() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobResult(v JobResult) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobResult sets the jobResult field to a newly
// allocated JobResult struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobResult() (JobResult, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobResult(capnp.Struct(s).Segment())
	if err != nil {
		return JobResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobResult() JobResult_Future {
	return JobResult_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

type ResultContentType uint16

// ResultContentType_TypeID is the unique identifier for the type ResultContentType.
const ResultContentType_TypeID = 0xcb3158a325d2d5bb

// Values of ResultContentType.
const (
	ResultContentType_stringJSON  ResultContentType = 0
	ResultContentType_stringPlain ResultContentType = 1
	ResultContentType_int64       ResultContentType = 2
	ResultContentType_bytes       ResultContentType = 3
)

// String returns the enum's constant name.
func (c ResultContentType) String() string {
	switch c {
	case ResultContentType_stringJSON:
		return "stringJSON"
	case ResultContentType_stringPlain:
		return "stringPlain"
	case ResultContentType_int64:
		return "int64"
	case ResultContentType_bytes:
		return "bytes"

	default:
		return ""
	}
}

// ResultContentTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultContentTypeFromString(c string) ResultContentType {
	switch c {
	case "stringJSON":
		return ResultContentType_stringJSON
	case "stringPlain":
		return ResultContentType_stringPlain
	case "int64":
		return ResultContentType_int64
	case "bytes":
		return ResultContentType_bytes

	default:
		return 0
	}
}

type ResultContentType_List = capnp.EnumList[ResultContentType]

func NewResultContentType_List(s *capnp.Segment, sz int32) (ResultContentType_List, error) {
	return capnp.NewEnumList[ResultContentType](s, sz)
}

type JobResult capnp.Struct

// JobResult_TypeID is the unique identifier for the type JobResult.
const JobResult_TypeID = 0x89d5e64a8e7e9034

func NewJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func NewRootJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func ReadRootJobResult(msg *capnp.Message) (JobResult, error) {
	root, err := msg.Root()
	return JobResult(root.Struct()), err
}

func (s JobResult) String() string {
	str, _ := text.Marshal(0x89d5e64a8e7e9034, capnp.Struct(s))
	return str
}

func (s JobResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResult) DecodeFromPtr(p capnp.Ptr) JobResult {
	return JobResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResult) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobResult) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobResult) Success() bool {
	return capnp.Struct(s).Bit(16)
}

func (s JobResult) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s JobResult) ContentType() ResultContentType {
	return ResultContentType(capnp.Struct(s).Uint16(4))
}

func (s JobResult) SetContentType(v ResultContentType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s JobResult) Contents() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobResult) HasContents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResult) SetContents(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobResult_List is a list of JobResult.
type JobResult_List = capnp.StructList[JobResult]

// NewJobResult creates a new list of JobResult.
func NewJobResult_List(s *capnp.Segment, sz int32) (JobResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobResult](l), err
}

// JobResult_Future is a wrapper for a JobResult promised by a client call.
type JobResult_Future struct{ *capnp.Future }

func (f JobResult_Future) Struct() (JobResult, error) {
	p, err := f.Future.Ptr()
	return JobResult(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cV]l\x13\xd9\x15>\xe7^\xdbc[q" +
	"\xec\xe9\xb8\x0fT\xb4V\xd2\xa6j\xa3\x06\x918E\x15" +
	"*\x0a?\x01a\x83\xd3\xdc$P\xa0\x95Z;\xbe5" +
	"\x13\xec\x1933.\xb84\xe5GPAU\x10H " +
	"\x92\x96\x07\xfa\xf3\xd0\xaa\xaa**\xb5\x0f\xad\xaa\xfeH" +
	"\x94\xaa\x94\x97\"\xf6\x81\xddhWhY\xc4\x0a\xb4\x0b" +
	"\xda]V\xb0aVw\xc6\xf18\xce\x04\xf6\xc9\xe3\xb9" +
	"\xdf\xcc9\xe7;\xdf\xf9\xce\xac\xfe\x0d]\x1f\xe8\x8f\x0d" +
	"I@\xd8D0d\xcf={\xfa\xdf\xcc\xee\xf21`" +
	"\x9d\x88\xf6\xbb\xaf^O\xbev\xed\xbd\xab\x10D\x09@" +
	"9A\xef(\xe7\xa8\xb8:M\x0f\x00\xda\x83g\x7ft" +
	"&\xfb\xd6\xadS\xbe\xe0\xfb\xf4_\xca#\x07\xfc\x90\xde" +
	"\x03\xb4/\x1fz\xfdZd\xcd\xba\x0b\xc0V\"\xda\xda" +
	"\xce=\xd3i\xdb\xf8%\xec@\x09\x83\x88\xe9\x1b\x81(" +
	"\x02\xa6o\x05R\x08h\x7f\xeb\xd0\xe6\x0dO\x1e\xd4." +
	"\xfa\xbe\xf9\xfd\xe0c\x05C\xe2j>(\xd2\xd0\xcb\xbf" +
	"\xff0\x1c\x8c\xce\x80\xdcI<,`z]\xe8S\xa8" +
	"\xe4\x1cd&T\x02\xb4ow\xffg\xf0\xd1\x91\xe7\x97" +
	"\xfd^\x9b\xae\x85\x08*G\x1d\xf4tH\xbc\xb7\x99\xa3" +
	"_\x12s\xa1;\xca}\x07|\xd7\x01?X\xb7\xebw" +
	"\xff\xbe9\xfdG\x90;[\xb1D z\xa4\xa7J\xbf" +
	"$\xae\xfa$\x81\xbd\xf2\xca\x8d\xc1S\xb5\x0d\x7f\xf7}" +
	"\xf1i\xe9\xa92\xeb\x80/8\xe0KS\xb3\xddo\xce" +
	"\\\xffg;X\xbc9=/\xadE%\x16\x16\xe8H" +
	"\xf8\x0f\x80\xf6_o\xfd\xbf\xe7W\xbb\xfa\xaf/\xe1\xe2" +
	"\xb7a\x82\xca\x9f\x1c\xe4\x95\xb0\xe0b\xea{\x7f9\xf4" +
	"\xe3_\xbcq\xd3\x97\x8b\xb9\xf0\x00*\x0f\x1d\xf4\xfd\xb0" +
	"\xc8b4\xfd\xc4\x92\x13\xa5\xb9\xb6\xf2\x9c\x8cs\x91\xb7" +
	"\x95\xdd\x11q\xb5#2\x04h\x9f\xf8\xd9w\xee\x9d9" +
	"\xff\xc5\xbbKr\xa8E\x04\xc3\x0er:r\x18\xd0\x9e" +
	"\xbf\x88+\xa3#\xff{\x07\xd8\xe7\xb0\xa5\xe9B\x13\x14" +
	"1\xfd\xb7\xc8g\x10P\xb9\x1a\x11\x95\xed\xf8\xe1\xcc\xcf" +
	"\x83]\x9f\xff\xc0/\x03\x1e}\xac\xec\x8f\x8a\xabJT" +
	"d\xd0\xfd\xe7\x7f\x84w>\xee\xb5\xfd8SNGo" +
	"+\xb3\x0e\xf8B\xf4\x1e\xf4\xd9\x15n\x9a\xf9\x12_E" +
	"&\xf3U\xad\xba6\xab\x17\xb6\xeb\xa5\x1c7M)_" +
	"\xe2\xa3\x88,L\x03\x00\x01\x04\x90\xbf\xbc\x11\x80}\x81" +
	"\"[M\x101\x89\xe2^\x9f\xb8\xf7%\x8al\x90\xe0" +
	"\xe1\xb2^\xda\xa6jE\x94\x80\xa0\x04xxR\xd7," +
	"\xaeY\x18\x03\x821@\x9fXc\xdc\xac\x95-\x10q" +
	"\x12\xcd8\xf9\x02\x00\xfb.EV&(c\xc2\x0d\xa4" +
	"\x8a@E\x8a\xacJP&$\x89\x04@\xae\x08d\x99" +
	"\";H\x10i\x12)\x80\\\xcb\x020\x8b\";B" +
	"\xd0>\xa0\x1b\xfb\xb8\x91\xd1@*\xf2\x83\xcd\xbc\xcc\xda" +
	"\xe4$7MD (\xe6\xad\x91\xe7\x04H\xf5*\xc7" +
	"\xb8'#@\x8c{\xe7&\x00,\xa9\x85\xba\xb5\xe4\xdc" +
	"\xbf\x13\xfa\x88^\xe4\xab\x0az\xb1\x0e\xc0\x924\xd0a" +
	"\xdbn\xfe\xd3\x03\x00\xec Ev\x9c`\x0c\x9f\xdbn" +
	"\x01GE\xb2G(\xb2\x9f\x12\x8c\x91y\xdb-\xe1\x94" +
	"\xb8{\x92\";O0F?\xb2\x93\x18\x00\x90\xcf\x8d" +
	"\x01\xb0\xb3\x14\xd9%\x82\xb1\xc03;\x89A\x00yV" +
	"`g(\xb2_\x13L\xf1J\xd5\xaaC\xc8\xce\x9b\xa6" +
	"Z\xd22\xc3\"\xe1\x84\xa7\x1d@L\x00\xda\xa6\x957" +
	"\xac\xac^pO\x9b\x13\xd685\xb8Y\xab\xf0\xac\x0e" +
	"X\xc0\x847\xd8\x8d\xd3|Aoy\xb69\x17\x8d\xd3" +
	"\xb6\x067H\xd9b\xe8\xa9\x8a\xe0\xa5MN\xbd\xadr" +
	"\xc2\x96y\x90\xfbz\x81\xc4\xf7\x09)\xc5=\x7fs\x9b" +
	"\x11\x17\xdc.\xc3\xfe\x16Cw\xe2lS5,:\x9a" +
	"rH\x16\x81\x10\xe5.\xf1C\xe4\x15S\x00H\xe5O" +
	"\x8f\x01\xc4\xab\xaaV\x8aWu\xaddO\xe9\x85q+" +
	"oq\x88\x8f\xd7\xb5I\xf1\xd7\x91&\xa0\xd5\x1e+\xeb" +
	" \x0d\x8b\x17\x1bQ\xa1\xad\xac\x827\x11\x0bS\xd2/" +
	"\x9a\xff\x15\x8a\xeckK4\x19\x06\x82a\xc0\xd4\x94^" +
	"\xc8\x0cc\x07\x10\xecX\x96\xc8\x09}Dz9\x8d\xcd" +
	"U\xb3\x88\xc6\xa6-\xf9\xd1\xb8x +<7\xe4\x1e" +
	"\xb4E\xea\xf6\"\xc9M\x030\xbc\xd2\xa4)\xbd\xe0\xa3" +
	"\xa8\xaa\xc1\xbf\xaf\xea5\x13R\x0e\xc5\x98\xf0V\x80\xbf" +
	"nF\x1b\x0fd\xf5!\xb7+myd}\x18\xfe\x09" +
	"\x00\x1b\xa4\xc8\xd6\x13\x11P/\x19\xdct\xe65\x0a\x04" +
	"\xa3\x80\xb6\xaaY\xdc\xa8\x1a\x1c-n\xb8\x9d^v\x96" +
	"\xb3z!\xa3\xa9\x96\x9a/\xab?\xc8[\xaa\xae\xb5\xd2" +
	"\xd1\xd1Lc\xb3h\xf40E6\xea\xa5\x91\x13\x8d\xde" +
	"J\x91M\x08\x97Bw\xc8\xd91\x006J\x91}\xfb" +
	"\x13v\xdf\xc9?_\xd9\x88u\x8bo\xd2\x8b|\xd9L" +
	"]\xfb\xdc\xd4\xb0\xafz\xd5\xd5bC\xf5{\x1c\xd5\xf7" +
	"\x14\x1c\xd5w\x0d8\xaa_1\x00`\x9b\x96\xa1j\xa5" +
	"\xec8\xd0o\x8c4\xfe\x8c\x96A\xca\xabZJ\xd5\xac" +
	"5\x83\xa9B\xdd\xe2f{\xac\xady\xadh\xee\xcd\xef" +
	"\xe3c\xdc\xac\xeaZ1\xc7S~\x1a\xd9\xe3\xd3\x1b\xd1" +
	"\xaf\xd5\x14\xd9\xd7\x09\xdaZ\xad\xf2MA\x01P\xc3\\" +
	"0d[\xd3\x8b|$_\xe1\xa2a\xcb\x8c@V/" +
	"lS\xcb\xe5\x1c7\xe3\x0bQ\x03\xcd\xa81A{\x98" +
	"\"K\x92\xe5&\xc9\xcf\xa7\xc5\xb2r\x18s\xfb\xf4U" +
	"\xd7'\xfa\\\x9f\xe8\xc9:\x8cu\x19\x00\x18\x90?\x9b" +
	"]d\x17-\x06k\xab\x9aj\x09r 5.\xe8i" +
	"\xb5\xd7\x97\xf8\xd4\xaa\x82N\x8bu!\xa9\xe6\x9a\xd8," +
	"*YO\x91mo]\x13\x99)OV\xde\x9a`c" +
	"\x9e\xae\x9a\xd6\xbf\xd8\xc80\xe1}\x0d4f\xad\xc5\xda" +
	"0\xe1}\xc4\xfaO\xe2\x86F\x9d\xad\xcdn\xa1}\xad" +
	"G\xfb\x90\xe8af\xf8\x05\xbb\xdeIk\xbcN\xb5\xc9" +
	"\x17\xad\xfb\x86fT\xa1\x99\xbd\x14\x99E\x10\x1b\xdb~" +
	"\x7foc\xdb\x9f$(StI8!\x9e>N\x91" +
	"\x9d]n\xdd\xfb\xd9A\xbc\xac\x97L\xec\x04\x1c\xa5\x88" +
	"\x09\xef\xbb\x1fP\xdcl\x9a\x05H\x167\x16J\xfa8" +
	"\x00\x00\xff\xffdoQ!"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x89d5e64a8e7e9034,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb27dd3c6ab583dec,
			0xbf41758934cdd6b1,
			0xc1cb98e422996a9c,
			0xcb3158a325d2d5bb,
			0xd3e0a1867bba666a,
			0xdd67101174f73350,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xf62321059b987c55,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
