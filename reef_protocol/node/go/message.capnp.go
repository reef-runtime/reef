// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignID      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignID:
		return "assignID"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignID":
		return MessageToNodeKind_assignID
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty     MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignID  MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob  MessageToNode_body_Which = 2
	MessageToNode_body_Which_resumeJob MessageToNode_body_Which = 3
	MessageToNode_body_Which_abortJob  MessageToNode_body_Which = 4
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIDstartJobresumeJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignID:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_resumeJob:
		return s[21:30]
	case MessageToNode_body_Which_abortJob:
		return s[30:38]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignID() (AssignIDMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignID")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIDMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignID() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignID(v AssignIDMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignID sets the assignID field to a newly
// allocated AssignIDMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignID() (AssignIDMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIDMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIDMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobInitializationMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobInitializationMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobInitializationMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) ResumeJob() (JobResumeMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != resumeJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResumeMessage(p.Struct()), err
}

func (s MessageToNode_body) HasResumeJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetResumeJob(v JobResumeMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResumeJob sets the resumeJob field to a newly
// allocated JobResumeMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewResumeJob() (JobResumeMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobResumeMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobResumeMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobKillMessage, error) {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobKillMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobKillMessage) error {
	capnp.Struct(s).SetUint16(2, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobKillMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobKillMessage, error) {
	capnp.Struct(s).SetUint16(2, 4)
	ss, err := NewJobKillMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobKillMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignID() AssignIDMessage_Future {
	return AssignIDMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) ResumeJob() JobResumeMessage_Future {
	return JobResumeMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobKillMessage_Future {
	return JobKillMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIDMessage capnp.Struct

// AssignIDMessage_TypeID is the unique identifier for the type AssignIDMessage.
const AssignIDMessage_TypeID = 0xf62321059b987c55

func NewAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func NewRootAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func ReadRootAssignIDMessage(msg *capnp.Message) (AssignIDMessage, error) {
	root, err := msg.Root()
	return AssignIDMessage(root.Struct()), err
}

func (s AssignIDMessage) String() string {
	str, _ := text.Marshal(0xf62321059b987c55, capnp.Struct(s))
	return str
}

func (s AssignIDMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIDMessage) DecodeFromPtr(p capnp.Ptr) AssignIDMessage {
	return AssignIDMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIDMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIDMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIDMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIDMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIDMessage) NodeID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIDMessage) HasNodeID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIDMessage) SetNodeID(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIDMessage_List is a list of AssignIDMessage.
type AssignIDMessage_List = capnp.StructList[AssignIDMessage]

// NewAssignIDMessage creates a new list of AssignIDMessage.
func NewAssignIDMessage_List(s *capnp.Segment, sz int32) (AssignIDMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIDMessage](l), err
}

// AssignIDMessage_Future is a wrapper for a AssignIDMessage promised by a client call.
type AssignIDMessage_Future struct{ *capnp.Future }

func (f AssignIDMessage_Future) Struct() (AssignIDMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIDMessage(p.Struct()), err
}

type JobResumeMessage capnp.Struct

// JobResumeMessage_TypeID is the unique identifier for the type JobResumeMessage.
const JobResumeMessage_TypeID = 0xb27dd3c6ab583dec

func NewJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func NewRootJobResumeMessage(s *capnp.Segment) (JobResumeMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return JobResumeMessage(st), err
}

func ReadRootJobResumeMessage(msg *capnp.Message) (JobResumeMessage, error) {
	root, err := msg.Root()
	return JobResumeMessage(root.Struct()), err
}

func (s JobResumeMessage) String() string {
	str, _ := text.Marshal(0xb27dd3c6ab583dec, capnp.Struct(s))
	return str
}

func (s JobResumeMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResumeMessage) DecodeFromPtr(p capnp.Ptr) JobResumeMessage {
	return JobResumeMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResumeMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResumeMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResumeMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResumeMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResumeMessage) Job() (JobInitializationMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s JobResumeMessage) HasJob() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResumeMessage) SetJob(v JobInitializationMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJob sets the job field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s JobResumeMessage) NewJob() (JobInitializationMessage, error) {
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s JobResumeMessage) PreviousState() (PreviousJobState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PreviousJobState(p.Struct()), err
}

func (s JobResumeMessage) HasPreviousState() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobResumeMessage) SetPreviousState(v PreviousJobState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPreviousState sets the previousState field to a newly
// allocated PreviousJobState struct, preferring placement in s's segment.
func (s JobResumeMessage) NewPreviousState() (PreviousJobState, error) {
	ss, err := NewPreviousJobState(capnp.Struct(s).Segment())
	if err != nil {
		return PreviousJobState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// JobResumeMessage_List is a list of JobResumeMessage.
type JobResumeMessage_List = capnp.StructList[JobResumeMessage]

// NewJobResumeMessage creates a new list of JobResumeMessage.
func NewJobResumeMessage_List(s *capnp.Segment, sz int32) (JobResumeMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[JobResumeMessage](l), err
}

// JobResumeMessage_Future is a wrapper for a JobResumeMessage promised by a client call.
type JobResumeMessage_Future struct{ *capnp.Future }

func (f JobResumeMessage_Future) Struct() (JobResumeMessage, error) {
	p, err := f.Future.Ptr()
	return JobResumeMessage(p.Struct()), err
}
func (p JobResumeMessage_Future) Job() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p JobResumeMessage_Future) PreviousState() PreviousJobState_Future {
	return PreviousJobState_Future{Future: p.Future.Field(1, nil)}
}

type PreviousJobState capnp.Struct

// PreviousJobState_TypeID is the unique identifier for the type PreviousJobState.
const PreviousJobState_TypeID = 0xbf41758934cdd6b1

func NewPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func NewRootPreviousJobState(s *capnp.Segment) (PreviousJobState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PreviousJobState(st), err
}

func ReadRootPreviousJobState(msg *capnp.Message) (PreviousJobState, error) {
	root, err := msg.Root()
	return PreviousJobState(root.Struct()), err
}

func (s PreviousJobState) String() string {
	str, _ := text.Marshal(0xbf41758934cdd6b1, capnp.Struct(s))
	return str
}

func (s PreviousJobState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PreviousJobState) DecodeFromPtr(p capnp.Ptr) PreviousJobState {
	return PreviousJobState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PreviousJobState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PreviousJobState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PreviousJobState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PreviousJobState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PreviousJobState) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s PreviousJobState) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s PreviousJobState) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s PreviousJobState) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PreviousJobState) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// PreviousJobState_List is a list of PreviousJobState.
type PreviousJobState_List = capnp.StructList[PreviousJobState]

// NewPreviousJobState creates a new list of PreviousJobState.
func NewPreviousJobState_List(s *capnp.Segment, sz int32) (PreviousJobState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PreviousJobState](l), err
}

// PreviousJobState_Future is a wrapper for a PreviousJobState promised by a client call.
type PreviousJobState_Future struct{ *capnp.Future }

func (f PreviousJobState_Future) Struct() (PreviousJobState, error) {
	p, err := f.Future.Ptr()
	return PreviousJobState(p.Struct()), err
}

type JobInitializationMessage capnp.Struct

// JobInitializationMessage_TypeID is the unique identifier for the type JobInitializationMessage.
const JobInitializationMessage_TypeID = 0xc1cb98e422996a9c

func NewJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func NewRootJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func ReadRootJobInitializationMessage(msg *capnp.Message) (JobInitializationMessage, error) {
	root, err := msg.Root()
	return JobInitializationMessage(root.Struct()), err
}

func (s JobInitializationMessage) String() string {
	str, _ := text.Marshal(0xc1cb98e422996a9c, capnp.Struct(s))
	return str
}

func (s JobInitializationMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobInitializationMessage) DecodeFromPtr(p capnp.Ptr) JobInitializationMessage {
	return JobInitializationMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobInitializationMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobInitializationMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobInitializationMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobInitializationMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobInitializationMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobInitializationMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobInitializationMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobInitializationMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobInitializationMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobInitializationMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobInitializationMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobInitializationMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobInitializationMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobInitializationMessage_List is a list of JobInitializationMessage.
type JobInitializationMessage_List = capnp.StructList[JobInitializationMessage]

// NewJobInitializationMessage creates a new list of JobInitializationMessage.
func NewJobInitializationMessage_List(s *capnp.Segment, sz int32) (JobInitializationMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobInitializationMessage](l), err
}

// JobInitializationMessage_Future is a wrapper for a JobInitializationMessage promised by a client call.
type JobInitializationMessage_Future struct{ *capnp.Future }

func (f JobInitializationMessage_Future) Struct() (JobInitializationMessage, error) {
	p, err := f.Future.Ptr()
	return JobInitializationMessage(p.Struct()), err
}

type JobKillMessage capnp.Struct

// JobKillMessage_TypeID is the unique identifier for the type JobKillMessage.
const JobKillMessage_TypeID = 0xdd67101174f73350

func NewJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func NewRootJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func ReadRootJobKillMessage(msg *capnp.Message) (JobKillMessage, error) {
	root, err := msg.Root()
	return JobKillMessage(root.Struct()), err
}

func (s JobKillMessage) String() string {
	str, _ := text.Marshal(0xdd67101174f73350, capnp.Struct(s))
	return str
}

func (s JobKillMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobKillMessage) DecodeFromPtr(p capnp.Ptr) JobKillMessage {
	return JobKillMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobKillMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobKillMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobKillMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobKillMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobKillMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobKillMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobKillMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobKillMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobKillMessage_List is a list of JobKillMessage.
type JobKillMessage_List = capnp.StructList[JobKillMessage]

// NewJobKillMessage creates a new list of JobKillMessage.
func NewJobKillMessage_List(s *capnp.Segment, sz int32) (JobKillMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobKillMessage](l), err
}

// JobKillMessage_Future is a wrapper for a JobKillMessage promised by a client call.
type JobKillMessage_Future struct{ *capnp.Future }

func (f JobKillMessage_Future) Struct() (JobKillMessage, error) {
	p, err := f.Future.Ptr()
	return JobKillMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobResult    MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSyncjobResult"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]
	case MessageFromNode_body_Which_jobResult:
		return s[17:26]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobResult() (JobResult, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobResult")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResult(p.Struct()), err
}

func (s MessageFromNode_body) HasJobResult() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobResult(v JobResult) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobResult sets the jobResult field to a newly
// allocated JobResult struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobResult() (JobResult, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobResult(capnp.Struct(s).Segment())
	if err != nil {
		return JobResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobResult() JobResult_Future {
	return JobResult_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

type ResultContentType uint16

// ResultContentType_TypeID is the unique identifier for the type ResultContentType.
const ResultContentType_TypeID = 0xcb3158a325d2d5bb

// Values of ResultContentType.
const (
	ResultContentType_stringJSON  ResultContentType = 0
	ResultContentType_stringPlain ResultContentType = 1
	ResultContentType_int64       ResultContentType = 2
	ResultContentType_bytes       ResultContentType = 3
)

// String returns the enum's constant name.
func (c ResultContentType) String() string {
	switch c {
	case ResultContentType_stringJSON:
		return "stringJSON"
	case ResultContentType_stringPlain:
		return "stringPlain"
	case ResultContentType_int64:
		return "int64"
	case ResultContentType_bytes:
		return "bytes"

	default:
		return ""
	}
}

// ResultContentTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultContentTypeFromString(c string) ResultContentType {
	switch c {
	case "stringJSON":
		return ResultContentType_stringJSON
	case "stringPlain":
		return ResultContentType_stringPlain
	case "int64":
		return ResultContentType_int64
	case "bytes":
		return ResultContentType_bytes

	default:
		return 0
	}
}

type ResultContentType_List = capnp.EnumList[ResultContentType]

func NewResultContentType_List(s *capnp.Segment, sz int32) (ResultContentType_List, error) {
	return capnp.NewEnumList[ResultContentType](s, sz)
}

type JobResult capnp.Struct

// JobResult_TypeID is the unique identifier for the type JobResult.
const JobResult_TypeID = 0x89d5e64a8e7e9034

func NewJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func NewRootJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func ReadRootJobResult(msg *capnp.Message) (JobResult, error) {
	root, err := msg.Root()
	return JobResult(root.Struct()), err
}

func (s JobResult) String() string {
	str, _ := text.Marshal(0x89d5e64a8e7e9034, capnp.Struct(s))
	return str
}

func (s JobResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResult) DecodeFromPtr(p capnp.Ptr) JobResult {
	return JobResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResult) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobResult) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobResult) Success() bool {
	return capnp.Struct(s).Bit(16)
}

func (s JobResult) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s JobResult) ContentType() ResultContentType {
	return ResultContentType(capnp.Struct(s).Uint16(4))
}

func (s JobResult) SetContentType(v ResultContentType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s JobResult) Contents() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobResult) HasContents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResult) SetContents(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobResult_List is a list of JobResult.
type JobResult_List = capnp.StructList[JobResult]

// NewJobResult creates a new list of JobResult.
func NewJobResult_List(s *capnp.Segment, sz int32) (JobResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobResult](l), err
}

// JobResult_Future is a wrapper for a JobResult promised by a client call.
type JobResult_Future struct{ *capnp.Future }

func (f JobResult_Future) Struct() (JobResult, error) {
	p, err := f.Future.Ptr()
	return JobResult(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cV_\x8c\x13_\x15>\xe7\xde\xb6\xd36\xdb" +
	"m\xc7\xa9\x0f\x18\xb0a\x15#\x1b\x97\xc0v%J$" +
	"\xcb\xc2.\xa1\x85]\xf6\xee.\x08\xa8\xd1\xe9\xf6Z\xa6" +
	"\xb43uf*TD\xfe\x845`\x94@\x02aQ" +
	"L@|1\xc6\x18|\xf0A\x1f\xfc\x93(\"\xf2\xa0" +
	"dMD\x89\x86\xa8\x04\x83Q\x88\x88\xc2\x0f\xe6\x97;" +
	"\xd3\xedt\xbb\xb3\xf0{\xda\xd9\xb9\xdf\xdc\xf3\x9d\xef|" +
	"\xe7\x9c\xae\xbdF7\x85\xd6%\x06% l*\x1cq" +
	"\xee\xbdx\xfe\xeb\xdc\xde\xca\x09`\xdd\x88\xce\xbf\xffx" +
	"+\xfd\xa7\x1b\xff\xf9\x05\x84Q\x02Pf\xe8}\xe5\x1c" +
	"\x15O_\xa3\x07\x01\x9d\x81\xb3_:\x93\xff\xfb\xdc\xe9" +
	"@\xf0C\xfas\xe5\xb1\x0b\xfe'}\x00\xe8\\9\xfc" +
	"\xe7\x1b\xb1\xf5\x1b/\x00[\x8e\xe8\xe8\xbb\xf7\x1d\xc9:" +
	"\xe6\xb7`\x17J\x18F\xcc\xde\x0e\xc5\x110;\x17\xca" +
	" \xa0\xf3\x89\xc3#C\xcf\x1e\xd5/\x06\xde\xfc4\xfc" +
	"D\xc1\x88xz\x19\x164\x8c\xca\xf7\xfe\x17\x0d\xc7g" +
	"A\xee&>\x160\xbb1\xf2.TF]d.\xb2" +
	"\x13\xd0\xb9\xdb\xf3\xab\x81\xc7\xc7^]\x09\xba6\xabF" +
	"\x08*U\x17\xadE\xc4\xbd-\x8eA$nF\xee+" +
	"s.\xf8\xb7.\xf8\xd1\xc6=\xdf\xfd\xe5\x9d#?\x00" +
	"\xb9\xbb\x1dK\x04B\x96\x9e++$\xf1\xb4L\x12\xd8" +
	"\xeb\xbf\xbf=p\xba>\xf4\x93\xc0\x8b\x1b\xd2se\xc6" +
	"\x05\x1fw\xc1\x97\xcb\x97z\xfe:{\xebg\x9d`q" +
	"s\xf6\xa1\xb4\x01\x95\xff\xbb\xe8\xa7\xd2\xf7\x01\x9d\x1f\xcf" +
	"\xfdn\xd5\xb5=\xebn-\xd2\xe2B\x94\xa0r5*" +
	"\x90\xdf\x8c\x96\x00\x9d\xf2g\x7ft\xf8\xcbW\xffr'" +
	"P\x8b\x9b\xd1~T\xfe\xe0\xa2\xe7\xa2\x82\xc5x\xf6\x99" +
	"-\xa7J\xf7:\xd2s\x19\x7f4\xf6\x0fe$&\x9e" +
	"\x86b\x83\x80\xce\xcc\xd7?\xfd\xe0\xcc\xf9\x0f\xfcm\x11" +
	"\x075&\x14v\x91Z\xec(\xa0\xf3\xf2\".\x8f\x8f" +
	"\xfd\xe6_\xc0\xde\x8bmE\x17\x9e\xa0\x88\xd9\xef\xc4\xde" +
	"\x83\x80\xca\xf5\x98\xc8l\xd7\x17g\xbf\x11^\xf9\xbe\xff" +
	"\x061`\xf1'\xca\xa7\xe2\xe2io\\0\xe8\xf9\xe1" +
	"O\xa3\xbb\x9f\xf4:A\x9a)\x8d\xf8]e\xc6\x05\x1f" +
	"\x8f?\x80>\xa7\xca-K-\xf15dZ\xad\xe9\xb5" +
	"\x0dy\xa3\xb0\xc3(\x8dr\xcb\x92\xd4\x12\x1fGdQ" +
	"\x1a\x02\x08!\x80\xbcz3\x00{?E\xb6\x96 b" +
	"\x1a\xc5\xbb>\xf1\xee\x83\x14\xd9\x00\xc1\xa3\x15\xa3\xb4]" +
	"\xd3\x8b(\x01A\x09\xf0\xe8\xb4\xa1\xdb\\\xb71\x01\x04" +
	"\x13\x80\x01\xb1&\xb8U\xaf\xd8 \xe2\xa4Zq\xd4\x02" +
	"\x00\xfb\x0cEV!(c\xca\x0b\xa4\x89@E\x8a\xac" +
	"FP&$\x8d\x04@\xae\x0ad\x85\";D\x10i" +
	"\x1a)\x80\\\xcf\x030\x9b\";F\xd09h\x98\x07" +
	"\xb8\x99\xd3A*\xf2C-^V}z\x9a[\x16\"" +
	"\x10\x14\xfd\xd6\xe49\x05R\xa3\xc61\xe9\xdb\x08\x10\x93" +
	"\xfe\xb9\x05\x00\x8br\xa1^.\xa3\xde\xbfS\xc6\x98Q" +
	"\xe4k\x0aF\xb1\x01\xc0\xd24\xd4\xe58\x1e\xff#\xfd" +
	"\x00\xec\x10Ev\x92`\x02_9^\x02\xc7\x05\xd9c" +
	"\x14\xd9W\x09&\xc8K\xc7K\xe1\xb4x{\x8a\";" +
	"O0A\xdfr\xd2\x18\x02\x90\xcfM\x00\xb0\xb3\x14\xd9" +
	"e\x82\x89\xd0\x0b'\x8da\x00\xf9\x92\xc0\xceRd\xdf" +
	"&\x98\xe1\xd5\x9a\xdd\x80\x88\xa3Z\x96V\xd2s\xc3\x82" +
	"p\xca\xf7\x0e \xa6\x00\x1d\xcbVM;o\x14\xbc\xd3" +
	"V\x875OMn\xd5\xab<o\x00\x160\xe57v" +
	"\xf3T-\x18m\xdf\xb6\xfa\xa2y\xdaQ\xe0\xa6([" +
	"M#S\x15\xbat\xd8\xa9\xb7\xddN\xd8\xd6\x0fr_" +
	"/\x90\xe4\x01a\xa5\xa4?\xdf\xbcb$\x85\xb6K\xa8" +
	"\xbf\xd54\xdc8\xdb5\x1d\x8b\"X\x97+\xf2\x8a^" +
	"\xf1\xad\xfcn\xf1\x87\xc8\x892@\xb2\xa6\xe9\xa5d\xcd" +
	"\xd0KN\xd9(L\xda\xaa\xcd!9\xd9\xd0\xa7;/" +
	"\xce\xbb\xa7\xa6\xcd\x8b\xcd\x10\xd0\x91C\xc1\xb7\xff|K" +
	"\xac\x13\x95\xfe\x10E\xf6\x91E\x06\x8c\x02\xc1(`\xa6" +
	"l\x14r\xc3\xd8\x05\x04\xbb\x96Tm\xca\x18\x93\xde\xac" +
	"Yk\xaf,\xd0\xac5\x83\x824[\xd8}U>:" +
	"\xe8\x1dtD\xea\xf1#\xc9\xadn7\xfd\xd4\xa4\xb2Q" +
	"\x08\xb0O\xcd\xe4\x9f\xd7\x8c\xba\x05\x19WVL\xf9\xf3" +
	">\xd8$\xe3\xcd\x0f\xf2\xc6\xa0W\x89\x0e\x1e\xf9\x00\x85" +
	"\xbf\x02\xc0\x06(\xb2MD\x044J&\xb7\xdc\xe6\x8c" +
	"\x03\xc18\xa0\xa3\xe967k&G\x9b\x9b^u\x97" +
	"l\xdc\xbcQ\xc8\xe9\x9a\xad\xa9\x15\xed\x0b\xaa\xad\x19z" +
	"\xbb\x1c]-\x1a#\xa2\xd0\xc3\x14\xd9\xb8OcT\x14" +
	"z\x1bE6%F\x12z\x1d\xcdN\x00\xb0q\x8a\xec" +
	"\x93\xef\xb0\xfa.\x7f\xb5\xba\x19\x1b6\xdfb\x14\xf9\x92" +
	"L\xbdY\xb9\xa59\xab\x1a5\xcf\x8b)7\xea\xea}" +
	"\xae\xc5W\x15\\\x8b\xaf\xec\x07@*/\xeb\x07p," +
	"\xdb\xd4\xf4R~\x12\xe8\xce\xb1\xe6?\xe3\x15\x90TM" +
	"\xcfh\xba\xbd~ Sh\xd8\xdc\xea\x8c\xb5M\xd5\x8b" +
	"\xd6~\xf5\x00\x9f\xe0V\xcd\xd0\x8b\xa3<\x13\xe4\x91}" +
	"\x01\xb5\x11\xf5ZK\x91}\x8c\xa0\xa3\xd7\xab\x1f\x17\x12" +
	"\x005\xad\xf9\xe9\xeb\xe8F\x91\x8f\xa9U.\x0a\xb6D" +
	"\x0b\xe4\x8d\xc2v\xadR\x19\xe5Vr>j\xa8\x155" +
	"!d\x8fRdi\xb2T'\x05\x0de\xb1\x99\\\xc5" +
	"\xbc:}\xd8\x1b\x0a}\xdePX\x95w\x15[i\x02" +
	"`H^\x91_0\"\xda\xa6\xa9\xa3\xe9\x9a-\xc4\x81" +
	"\xcc\xa4\x90\xa7}\x96\xbea(\xad)\x18\xb4\xd8\x10\x96" +
	"j\xed\x84\x11\x91\xc9&\x8alG\xfbN\xc8\x95}[" +
	"\xf9;\x81M\xf8\xbej\xcd\xf9\x85\xc3\x0bS\xfe\xeao" +
	"\xf6Z\xb9\xb9b\x01mL\xf9\xbfX\x83;q\xa8\x99" +
	"g{\xb1\xdbd\xdf\xe0\xcb>(j\x98\x1b~\xcdb" +
	"wiM6\xa8>\xfd\xba\xdd\xde\xf4\x8c&<\xb3\x9f" +
	"\"\xb3\x09bs\xb5\x7f\xae\xb7\xb9\xdaO\x11\x94)z" +
	"\"\xcc\x88\xafORdg\x97\xda\xedA\xe3 Y1" +
	"J\x16v\x03\x8eS\xc4\x94\xff#\x1fP\xbcl\x0d\x0b" +
	"\x90ln\xce\xa7\xf4v\x00\x00\x00\xff\xff=\\J\xe8"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x89d5e64a8e7e9034,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb27dd3c6ab583dec,
			0xbf41758934cdd6b1,
			0xc1cb98e422996a9c,
			0xcb3158a325d2d5bb,
			0xd3e0a1867bba666a,
			0xdd67101174f73350,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xf62321059b987c55,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
