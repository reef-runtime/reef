// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_initHandShake MessageToNodeKind = 1
	MessageToNodeKind_assignId      MessageToNodeKind = 2
	MessageToNodeKind_startJob      MessageToNodeKind = 3
	MessageToNodeKind_abortJob      MessageToNodeKind = 4
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_assignId:
		return "assignId"
	case MessageToNodeKind_startJob:
		return "startJob"
	case MessageToNodeKind_abortJob:
		return "abortJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "assignId":
		return MessageToNodeKind_assignId
	case "startJob":
		return MessageToNodeKind_startJob
	case "abortJob":
		return MessageToNodeKind_abortJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty    MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignId MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob MessageToNode_body_Which = 2
	MessageToNode_body_Which_abortJob MessageToNode_body_Which = 3
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIdstartJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignId:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_abortJob:
		return s[21:29]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignId() (AssignIdMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignId")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIdMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignId() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignId(v AssignIdMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignId sets the assignId field to a newly
// allocated AssignIdMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignId() (AssignIdMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIdMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIdMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobStartMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStartMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobStartMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobStartMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobStartMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobStartMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobStartMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobAbortMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobAbortMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobAbortMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobAbortMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobAbortMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobAbortMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobAbortMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignId() AssignIdMessage_Future {
	return AssignIdMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobStartMessage_Future {
	return JobStartMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobAbortMessage_Future {
	return JobAbortMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIdMessage capnp.Struct

// AssignIdMessage_TypeID is the unique identifier for the type AssignIdMessage.
const AssignIdMessage_TypeID = 0xb00291a156771b6b

func NewAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func NewRootAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func ReadRootAssignIdMessage(msg *capnp.Message) (AssignIdMessage, error) {
	root, err := msg.Root()
	return AssignIdMessage(root.Struct()), err
}

func (s AssignIdMessage) String() string {
	str, _ := text.Marshal(0xb00291a156771b6b, capnp.Struct(s))
	return str
}

func (s AssignIdMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIdMessage) DecodeFromPtr(p capnp.Ptr) AssignIdMessage {
	return AssignIdMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIdMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIdMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIdMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIdMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIdMessage) NodeId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIdMessage) HasNodeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIdMessage) SetNodeId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIdMessage_List is a list of AssignIdMessage.
type AssignIdMessage_List = capnp.StructList[AssignIdMessage]

// NewAssignIdMessage creates a new list of AssignIdMessage.
func NewAssignIdMessage_List(s *capnp.Segment, sz int32) (AssignIdMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIdMessage](l), err
}

// AssignIdMessage_Future is a wrapper for a AssignIdMessage promised by a client call.
type AssignIdMessage_Future struct{ *capnp.Future }

func (f AssignIdMessage_Future) Struct() (AssignIdMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIdMessage(p.Struct()), err
}

type JobStartMessage capnp.Struct

// JobStartMessage_TypeID is the unique identifier for the type JobStartMessage.
const JobStartMessage_TypeID = 0xc1654f845d3e3fd8

func NewJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return JobStartMessage(st), err
}

func NewRootJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return JobStartMessage(st), err
}

func ReadRootJobStartMessage(msg *capnp.Message) (JobStartMessage, error) {
	root, err := msg.Root()
	return JobStartMessage(root.Struct()), err
}

func (s JobStartMessage) String() string {
	str, _ := text.Marshal(0xc1654f845d3e3fd8, capnp.Struct(s))
	return str
}

func (s JobStartMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartMessage) DecodeFromPtr(p capnp.Ptr) JobStartMessage {
	return JobStartMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobStartMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStartMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s JobStartMessage) DatasetId() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s JobStartMessage) HasDatasetId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s JobStartMessage) DatasetIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s JobStartMessage) SetDatasetId(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s JobStartMessage) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStartMessage) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStartMessage) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s JobStartMessage) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// JobStartMessage_List is a list of JobStartMessage.
type JobStartMessage_List = capnp.StructList[JobStartMessage]

// NewJobStartMessage creates a new list of JobStartMessage.
func NewJobStartMessage_List(s *capnp.Segment, sz int32) (JobStartMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[JobStartMessage](l), err
}

// JobStartMessage_Future is a wrapper for a JobStartMessage promised by a client call.
type JobStartMessage_Future struct{ *capnp.Future }

func (f JobStartMessage_Future) Struct() (JobStartMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartMessage(p.Struct()), err
}

type JobAbortMessage capnp.Struct

// JobAbortMessage_TypeID is the unique identifier for the type JobAbortMessage.
const JobAbortMessage_TypeID = 0xd98a9e5f84dacc76

func NewJobAbortMessage(s *capnp.Segment) (JobAbortMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobAbortMessage(st), err
}

func NewRootJobAbortMessage(s *capnp.Segment) (JobAbortMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobAbortMessage(st), err
}

func ReadRootJobAbortMessage(msg *capnp.Message) (JobAbortMessage, error) {
	root, err := msg.Root()
	return JobAbortMessage(root.Struct()), err
}

func (s JobAbortMessage) String() string {
	str, _ := text.Marshal(0xd98a9e5f84dacc76, capnp.Struct(s))
	return str
}

func (s JobAbortMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobAbortMessage) DecodeFromPtr(p capnp.Ptr) JobAbortMessage {
	return JobAbortMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobAbortMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobAbortMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobAbortMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobAbortMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobAbortMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobAbortMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobAbortMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobAbortMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobAbortMessage_List is a list of JobAbortMessage.
type JobAbortMessage_List = capnp.StructList[JobAbortMessage]

// NewJobAbortMessage creates a new list of JobAbortMessage.
func NewJobAbortMessage_List(s *capnp.Segment, sz int32) (JobAbortMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobAbortMessage](l), err
}

// JobAbortMessage_Future is a wrapper for a JobAbortMessage promised by a client call.
type JobAbortMessage_Future struct{ *capnp.Future }

func (f JobAbortMessage_Future) Struct() (JobAbortMessage, error) {
	p, err := f.Future.Ptr()
	return JobAbortMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
	MessageFromNodeKind_jobResult    MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"
	case MessageFromNodeKind_jobResult:
		return "jobResult"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync
	case "jobResult":
		return MessageFromNodeKind_jobResult

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobResult    MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSyncjobResult"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]
	case MessageFromNode_body_Which_jobResult:
		return s[17:26]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobResult() (JobResult, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobResult")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResult(p.Struct()), err
}

func (s MessageFromNode_body) HasJobResult() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobResult(v JobResult) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobResult sets the jobResult field to a newly
// allocated JobResult struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobResult() (JobResult, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobResult(capnp.Struct(s).Segment())
	if err != nil {
		return JobResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobResult() JobResult_Future {
	return JobResult_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

type ResultContentType uint16

// ResultContentType_TypeID is the unique identifier for the type ResultContentType.
const ResultContentType_TypeID = 0xcb3158a325d2d5bb

// Values of ResultContentType.
const (
	ResultContentType_i32         ResultContentType = 0
	ResultContentType_bytes       ResultContentType = 1
	ResultContentType_stringPlain ResultContentType = 2
	ResultContentType_stringJSON  ResultContentType = 3
)

// String returns the enum's constant name.
func (c ResultContentType) String() string {
	switch c {
	case ResultContentType_i32:
		return "i32"
	case ResultContentType_bytes:
		return "bytes"
	case ResultContentType_stringPlain:
		return "stringPlain"
	case ResultContentType_stringJSON:
		return "stringJSON"

	default:
		return ""
	}
}

// ResultContentTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultContentTypeFromString(c string) ResultContentType {
	switch c {
	case "i32":
		return ResultContentType_i32
	case "bytes":
		return ResultContentType_bytes
	case "stringPlain":
		return ResultContentType_stringPlain
	case "stringJSON":
		return ResultContentType_stringJSON

	default:
		return 0
	}
}

type ResultContentType_List = capnp.EnumList[ResultContentType]

func NewResultContentType_List(s *capnp.Segment, sz int32) (ResultContentType_List, error) {
	return capnp.NewEnumList[ResultContentType](s, sz)
}

type JobResult capnp.Struct

// JobResult_TypeID is the unique identifier for the type JobResult.
const JobResult_TypeID = 0x89d5e64a8e7e9034

func NewJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func NewRootJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func ReadRootJobResult(msg *capnp.Message) (JobResult, error) {
	root, err := msg.Root()
	return JobResult(root.Struct()), err
}

func (s JobResult) String() string {
	str, _ := text.Marshal(0x89d5e64a8e7e9034, capnp.Struct(s))
	return str
}

func (s JobResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResult) DecodeFromPtr(p capnp.Ptr) JobResult {
	return JobResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResult) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobResult) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobResult) Success() bool {
	return capnp.Struct(s).Bit(16)
}

func (s JobResult) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s JobResult) ContentType() ResultContentType {
	return ResultContentType(capnp.Struct(s).Uint16(4))
}

func (s JobResult) SetContentType(v ResultContentType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s JobResult) Contents() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobResult) HasContents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResult) SetContents(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobResult_List is a list of JobResult.
type JobResult_List = capnp.StructList[JobResult]

// NewJobResult creates a new list of JobResult.
func NewJobResult_List(s *capnp.Segment, sz int32) (JobResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobResult](l), err
}

// JobResult_Future is a wrapper for a JobResult promised by a client call.
type JobResult_Future struct{ *capnp.Future }

func (f JobResult_Future) Struct() (JobResult, error) {
	p, err := f.Future.Ptr()
	return JobResult(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cVo\x88T\xd5\x1b~\x9fs\xe6\xdf.\xbb" +
	";{\x7f\xb3?\xf8\xfd\x91\x16%#\x97VtW#" +
	"\xa5\xd2U\x14wt\xd7=\xbb\xab\x96)vg\xe74" +
	"\xce\xee\xcc\xbd\xd3\xbdw\xd3AL\x11\x8d\x122\x85D" +
	"\x8d\x08-\x85>$\x19dD!h F\xda\x87\x0a" +
	"\xa1,\xa9\x04\x13!\xa9\x96\xa2\xbfz\xe3\xdc{\x9d\x19" +
	"gg\xb5Os\xef9\xcf\x9c\xf7}\x9f\xf7y\x9fs" +
	"gd\xf8\xfc\xd0\xcc\xc6\x17\"\xc4\xc4\xb2p\xc4\xbd\xf8" +
	"\xe7\x1f\x1fu?\x9a\xdbF\xa2\x09p\x7f\xfc\xf2l\xcb" +
	"Wg~>MaD\x89\x12\xed\xfcRb\x0eWO" +
	"\xb3\xf9\x06\x82;k\xf7\xd3\xbb\x92\xdf\x9d\x7f\xae&x" +
	"\x0f\xff q\xc0\x03\xef\xe5W\x08\xee\xc1M_\x9f\xa9" +
	"\xbb\xff\xa1\xbd$&\x01\xae\xb1r\xf5\xe6N\xd7z\x95" +
	"V \x8a\x10\xd09\x1a\xaa\x07!\xb19\xa4\xb0\x8fm" +
	"Z\xd4\xf5\xeb\xf7\xa3\xfbj\x1e\xbc6<\x96\xc8\x86\xd5" +
	"\x93\x0c\xab,\xcc\xdc\xd1\xdfb\xe1\xfa\xfd\xa45\xb12" +
	"\x96\xd0y$\xfc/$\x8e{\xc8\xb7\xc2\x19\x82{a" +
	"\xca\x87\xb3~\xdaz\xe3`\xadc;/\x86\x19\x12W" +
	"=\xf4e\xef\xdcR\x8a\xb5\x92X\x14\xb9\x94\x10\x11\xf5" +
	"\xd4\x13Q\xe0\x91\xffoXyh\x0f;FZ\xd38" +
	"\xec\xf3\x91\xb1\xc4\x01\x0f\xbb72\x8f\xe0~>\xef\xe1" +
	"\xb5\xdb\x97\xcbS\xd5\x07\x87\x14\xe4xd,qJ\x81" +
	";ODV\x81\xe0\xbe\x7f\xfe\xd3\xa9\xaf=2\xf3\xec" +
	"\xb8\xf2&\xc7\x18\x12\xed1\xf5\xa7i1U\xde\xf0\x13" +
	"\xefmz\xe6\xd07\x9f\xd5,oE\xac\x03\x09\xe9\xa1" +
	"\xf5\x98\xca\xf8\xa9s\x17\xb6\xaf{e\xe7\x17\xb52>" +
	"\x1d\x1bK|\xe2a?\x8e\xa9\x8cw\xbc\xb4\xee\xca\xae" +
	"\x17\xef\xb9<.\x87k*\x87\xdf=\xe4/\xb1-\x04" +
	"\xf7\xfa>L\xaa\xef=\xf7\x03\x89\xbbP\xd1G\xd5e" +
	"\x0et\xce\xa9\xfb\x9f\xearW\xdd\x9b\x04w\xca;'" +
	"c+\xc7\xda\xdc\xea|\x99:\xee\xdb\xba\x0b\x89ku" +
	"\xea\xe9j\xdd\x15jw\xf3\xd2\xb6\xf5\x8c\x9c\xce\x86\xf4" +
	"\x82Q\x98\x9b4S\xcb\xccL\x8f\xb4\xed\xa8\x9e\x91}" +
	"\x80\x88\xf1\x10Q\x08D\xda\xb4\x05D\xe2n\x0e1\x83" +
	"\x01h\x81ZkWk\xf7r\x88Y\x0c[rff" +
	"i\xd6H#J\x0cQ\xc2\x96!\xd3p\xa4\xe1\xa0\x91" +
	"\x18\x1a\x095b\xf5K{4\xe7\x90\x8a\xd3\\\x8a\xa3" +
	"\xa7\x88\xc4\xe3\x1c\"\xc7\xa0\xa1\xd9\x0f\x94U\x81\xd2\x1c" +
	"\xa2\xc0\xa01\xd6\x02F\xa4\xe5\x152\xc7!62\x80" +
	"\xb7\x80\x13i\xa3I\"\xe1p\x88\xad\x0c\xee\x06\xd3\x1a" +
	"\x91V\xb7A\xd1\xb4\xdcX\xca\xcb\x1e\x1d\x1a\x92\xb6\x0d" +
	"\x10\x83\x92B\x90\xe7 E\x8b\x05\x89xY\x1a\x04\xc4" +
	"\xcb\xfb6\x11\x8d\xab\x85\xfb\xb5\xf4\xf8\xaf\x83f\xaf\x99" +
	"\x96\xd3Sf\xbaH\xa4Jjp]?\x7f\xbd\x83H" +
	"\xac\xe1\x10\xeb\x19\x1aq\xc3\xf5\x0b\x90\xc9rU\x8d\xec" +
	"\xba\xeb\x97\x90O\x96\xcbj\xe4\x7f\xb9-\x08U\x15\xd6" +
	"*\xf3\x05\xa7H\x11W\xb7\xedl\xc6\xe8N\xab\xd4\x9a" +
	"\xcb\xd3B@3\xc1\xb5\x1d\xddr\x92f\xca\xdf-\xcd" +
	"G\xb0\xab\xa7\xcc\x8a\xdd\x92n\x83\xdd\xaaf\x05\x05." +
	"\xb6\xcc\xd6\xbc\xaa\xb1J\x1am\x95\xd2@\x85^\xb5\xf6" +
	"6b\xf1\x11%\x8bx\xd9R|b\xe3\x8a\xa7\x09\x98" +
	"\\l\x99^\x9c\xa5Y\x03iO\x1f\x1ea*\x10\xa0" +
	"MV?L\xfb\xef0\x11\xb8\xf6\xef~\xa2x!k" +
	"d\xe2\x05\xd3\xc8\xb8\xc3fj\xc0\xd1\x1dI\xf1\x81\xa2" +
	"1\xa4^=\x99\x11\x9c\xeaXI\x0fi92\x1dD" +
	"\xa5\xaa\xb2Reu\xdfT\xfcL\xd5\xc8\xfb8\xc4\x03" +
	"\xe3\xf4\x15#\x86\x18\xa1u\xd8Lu\xa7\xd1@\x0c\x0d" +
	"\x13\x129h\xf6F\xefLc\xc9\xdco\xa1\xb1d\x1b" +
	"\xb5h\x0c\xc2t\x05\xc2\xe8\x91\xad\xde\xba\x0a\x14*\x05" +
	"j\x9cK$b\x1c\xa2\x85a\x9ea\xa6ew\xfa6" +
	"S\xeaqTy\xd0\x7fJ\x07\x1dP\x0c\xed\xe7\x10\x87" +
	"\xcb\x0c\x1dR\x0c\xbd\xcc!^W\xa3\x0a_\xe9G\xb6" +
	"\x11\x89\xc3\x1c\xe2\x18\x83\xc6\x99/\xf4\xa3\xfdD\xe2\x0d" +
	"\x0e\xf1.\x83\x16\x82\xaf\xf3\xe3J\xe7os\x88\x93\x0c" +
	"Z\x98\xb7 L\xa4\x9d\xd8I$Nr\x88s\xff\x90" +
	"\xf5\x82ef,=\xbf\x00EG.4\xd3\xb2<\xb9" +
	"i\xdd\xd1m\xe9t\x13\xaa\xd0\xd2\xf6&\xbc\x9e\x18\xea" +
	"\x09n\xd6p\xa4U\xb0$\x1ci\xf9z\x9ap\xfa}" +
	"\x1b[\x18\xd8H\xb1\xe0\xeb(P\xec\x14_\xb1\x1d\xbe" +
	"bS\xbebW\x13E\xb3\x9d\x1d\xad\xa9\xa2#m\xd7" +
	"v\xac\xac\x91\xe9\xcbQT\xcf\x1a\xc1[r\x80\xf8\xf2" +
	"\xde\xeaHKt#m\xaf\xd7Gd\xbf\xb4\x0b\xa6q" +
	"K{+t\xb4\xba\x86n\x15\xad38\xc4\x83\x0c\xae" +
	"1\x9a_\xa5H$n\xd97m\xd1U:\xe8\xd5\xf3" +
	"R\x910\x81x\x93f\xaaK\xb9\xc6\x04\xaa\xea(\xab" +
	"j\x82!\xa8e\x97\xea\xce\xf0\x08\xf3\x952\xdb\x1f\xf1" +
	"v\xcb#lZ\xd2#l\xaa\xfa\x09i\x93\x93\xc1\xa4" +
	"\xbbY#\xeb(2\xa8u@\xd1Qi\x84\x95\xb6W" +
	"irwp\x9a\xe9)\x93\xa7\x8b\xa2\xa1\xc2\xb4\x17\xa9" +
	"\x82\xe6s\x88e\x95\xa6\xdd=L$\x96p\x88\xc1J" +
	"\xd3\x16J\xcb}\x1cbM\x85=\xdfjEh.\xdf" +
	"\xcd\x81\xcbV\x98\x13\x9a\xcb\x1f~\xb5=8\x19\x9c6" +
	"P\xe4\xc6\xd0\xed\xee\xcc\xa0\xe5Y\xd5\xf2\xf5\x1c\xc2a" +
	"@pe>\xd9\x16\xdc-\xcf\xaa9\x84\x9f\xfb\x0e\xf5" +
	"\xef\xed\x1cb\xf7Dwf\xad\x09\x89\xe7\xcc\x8c\x8d&" +
	"B\x1f\x07\x9a\xcb\x9f\xb8\x04\xb5X\x9a\x1f\x8a:\xd2\xba" +
	"99\x7f\x07\x00\x00\xff\xff\xa6\x87\xfb\xb4"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x89d5e64a8e7e9034,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb00291a156771b6b,
			0xc1654f845d3e3fd8,
			0xcb3158a325d2d5bb,
			0xd3e0a1867bba666a,
			0xd98a9e5f84dacc76,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
