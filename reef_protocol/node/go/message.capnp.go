// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignId      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
	MessageToNodeKind_abortJob      MessageToNodeKind = 5
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignId:
		return "assignId"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"
	case MessageToNodeKind_abortJob:
		return "abortJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignId":
		return MessageToNodeKind_assignId
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob
	case "abortJob":
		return MessageToNodeKind_abortJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty    MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignId MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob MessageToNode_body_Which = 2
	MessageToNode_body_Which_abortJob MessageToNode_body_Which = 3
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIdstartJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignId:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_abortJob:
		return s[21:29]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignId() (AssignIdMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignId")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIdMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignId() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignId(v AssignIdMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignId sets the assignId field to a newly
// allocated AssignIdMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignId() (AssignIdMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIdMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIdMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobStartMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStartMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobStartMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobStartMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobStartMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobStartMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobStartMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobKillMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobKillMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobKillMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobKillMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobKillMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobKillMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobKillMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignId() AssignIdMessage_Future {
	return AssignIdMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobStartMessage_Future {
	return JobStartMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobKillMessage_Future {
	return JobKillMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIdMessage capnp.Struct

// AssignIdMessage_TypeID is the unique identifier for the type AssignIdMessage.
const AssignIdMessage_TypeID = 0xb00291a156771b6b

func NewAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func NewRootAssignIdMessage(s *capnp.Segment) (AssignIdMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIdMessage(st), err
}

func ReadRootAssignIdMessage(msg *capnp.Message) (AssignIdMessage, error) {
	root, err := msg.Root()
	return AssignIdMessage(root.Struct()), err
}

func (s AssignIdMessage) String() string {
	str, _ := text.Marshal(0xb00291a156771b6b, capnp.Struct(s))
	return str
}

func (s AssignIdMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIdMessage) DecodeFromPtr(p capnp.Ptr) AssignIdMessage {
	return AssignIdMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIdMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIdMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIdMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIdMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIdMessage) NodeId() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIdMessage) HasNodeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIdMessage) SetNodeId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIdMessage_List is a list of AssignIdMessage.
type AssignIdMessage_List = capnp.StructList[AssignIdMessage]

// NewAssignIdMessage creates a new list of AssignIdMessage.
func NewAssignIdMessage_List(s *capnp.Segment, sz int32) (AssignIdMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIdMessage](l), err
}

// AssignIdMessage_Future is a wrapper for a AssignIdMessage promised by a client call.
type AssignIdMessage_Future struct{ *capnp.Future }

func (f AssignIdMessage_Future) Struct() (AssignIdMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIdMessage(p.Struct()), err
}

type JobStartMessage capnp.Struct

// JobStartMessage_TypeID is the unique identifier for the type JobStartMessage.
const JobStartMessage_TypeID = 0xc1654f845d3e3fd8

func NewJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return JobStartMessage(st), err
}

func NewRootJobStartMessage(s *capnp.Segment) (JobStartMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return JobStartMessage(st), err
}

func ReadRootJobStartMessage(msg *capnp.Message) (JobStartMessage, error) {
	root, err := msg.Root()
	return JobStartMessage(root.Struct()), err
}

func (s JobStartMessage) String() string {
	str, _ := text.Marshal(0xc1654f845d3e3fd8, capnp.Struct(s))
	return str
}

func (s JobStartMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartMessage) DecodeFromPtr(p capnp.Ptr) JobStartMessage {
	return JobStartMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobStartMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStartMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s JobStartMessage) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStartMessage) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStartMessage) InterpreterState() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s JobStartMessage) HasInterpreterState() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s JobStartMessage) SetInterpreterState(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// JobStartMessage_List is a list of JobStartMessage.
type JobStartMessage_List = capnp.StructList[JobStartMessage]

// NewJobStartMessage creates a new list of JobStartMessage.
func NewJobStartMessage_List(s *capnp.Segment, sz int32) (JobStartMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[JobStartMessage](l), err
}

// JobStartMessage_Future is a wrapper for a JobStartMessage promised by a client call.
type JobStartMessage_Future struct{ *capnp.Future }

func (f JobStartMessage_Future) Struct() (JobStartMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartMessage(p.Struct()), err
}

type JobKillMessage capnp.Struct

// JobKillMessage_TypeID is the unique identifier for the type JobKillMessage.
const JobKillMessage_TypeID = 0xdd67101174f73350

func NewJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func NewRootJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func ReadRootJobKillMessage(msg *capnp.Message) (JobKillMessage, error) {
	root, err := msg.Root()
	return JobKillMessage(root.Struct()), err
}

func (s JobKillMessage) String() string {
	str, _ := text.Marshal(0xdd67101174f73350, capnp.Struct(s))
	return str
}

func (s JobKillMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobKillMessage) DecodeFromPtr(p capnp.Ptr) JobKillMessage {
	return JobKillMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobKillMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobKillMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobKillMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobKillMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobKillMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobKillMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobKillMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobKillMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobKillMessage_List is a list of JobKillMessage.
type JobKillMessage_List = capnp.StructList[JobKillMessage]

// NewJobKillMessage creates a new list of JobKillMessage.
func NewJobKillMessage_List(s *capnp.Segment, sz int32) (JobKillMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobKillMessage](l), err
}

// JobKillMessage_Future is a wrapper for a JobKillMessage promised by a client call.
type JobKillMessage_Future struct{ *capnp.Future }

func (f JobKillMessage_Future) Struct() (JobKillMessage, error) {
	p, err := f.Future.Ptr()
	return JobKillMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping         MessageFromNodeKind = 0
	MessageFromNodeKind_pong         MessageFromNodeKind = 1
	MessageFromNodeKind_jobStateSync MessageFromNodeKind = 2
	MessageFromNodeKind_jobResult    MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobStateSync:
		return "jobStateSync"
	case MessageFromNodeKind_jobResult:
		return "jobResult"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobStateSync":
		return MessageFromNodeKind_jobStateSync
	case "jobResult":
		return MessageFromNodeKind_jobResult

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty        MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobStateSync MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobResult    MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobStateSyncjobResult"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobStateSync:
		return s[5:17]
	case MessageFromNode_body_Which_jobResult:
		return s[17:26]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobStateSync() (JobStateSync, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobStateSync")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobStateSync(p.Struct()), err
}

func (s MessageFromNode_body) HasJobStateSync() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobStateSync(v JobStateSync) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobStateSync sets the jobStateSync field to a newly
// allocated JobStateSync struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobStateSync() (JobStateSync, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobStateSync(capnp.Struct(s).Segment())
	if err != nil {
		return JobStateSync{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobResult() (JobResult, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobResult")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobResult(p.Struct()), err
}

func (s MessageFromNode_body) HasJobResult() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobResult(v JobResult) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobResult sets the jobResult field to a newly
// allocated JobResult struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobResult() (JobResult, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobResult(capnp.Struct(s).Segment())
	if err != nil {
		return JobResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobStateSync() JobStateSync_Future {
	return JobStateSync_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobResult() JobResult_Future {
	return JobResult_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobStateSync capnp.Struct

// JobStateSync_TypeID is the unique identifier for the type JobStateSync.
const JobStateSync_TypeID = 0xff2af25608c0b622

func NewJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func NewRootJobStateSync(s *capnp.Segment) (JobStateSync, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobStateSync(st), err
}

func ReadRootJobStateSync(msg *capnp.Message) (JobStateSync, error) {
	root, err := msg.Root()
	return JobStateSync(root.Struct()), err
}

func (s JobStateSync) String() string {
	str, _ := text.Marshal(0xff2af25608c0b622, capnp.Struct(s))
	return str
}

func (s JobStateSync) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStateSync) DecodeFromPtr(p capnp.Ptr) JobStateSync {
	return JobStateSync(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStateSync) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStateSync) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStateSync) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStateSync) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStateSync) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobStateSync) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobStateSync) Progress() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s JobStateSync) SetProgress(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s JobStateSync) Logs() (JobLogMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage_List(p.List()), err
}

func (s JobStateSync) HasLogs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStateSync) SetLogs(v JobLogMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLogs sets the logs field to a newly
// allocated JobLogMessage_List, preferring placement in s's segment.
func (s JobStateSync) NewLogs(n int32) (JobLogMessage_List, error) {
	l, err := NewJobLogMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return JobLogMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s JobStateSync) Interpreter() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobStateSync) HasInterpreter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobStateSync) SetInterpreter(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobStateSync_List is a list of JobStateSync.
type JobStateSync_List = capnp.StructList[JobStateSync]

// NewJobStateSync creates a new list of JobStateSync.
func NewJobStateSync_List(s *capnp.Segment, sz int32) (JobStateSync_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobStateSync](l), err
}

// JobStateSync_Future is a wrapper for a JobStateSync promised by a client call.
type JobStateSync_Future struct{ *capnp.Future }

func (f JobStateSync_Future) Struct() (JobStateSync, error) {
	p, err := f.Future.Ptr()
	return JobStateSync(p.Struct()), err
}

type ResultContentType uint16

// ResultContentType_TypeID is the unique identifier for the type ResultContentType.
const ResultContentType_TypeID = 0xcb3158a325d2d5bb

// Values of ResultContentType.
const (
	ResultContentType_stringJSON  ResultContentType = 0
	ResultContentType_stringPlain ResultContentType = 1
	ResultContentType_int64       ResultContentType = 2
	ResultContentType_bytes       ResultContentType = 3
)

// String returns the enum's constant name.
func (c ResultContentType) String() string {
	switch c {
	case ResultContentType_stringJSON:
		return "stringJSON"
	case ResultContentType_stringPlain:
		return "stringPlain"
	case ResultContentType_int64:
		return "int64"
	case ResultContentType_bytes:
		return "bytes"

	default:
		return ""
	}
}

// ResultContentTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultContentTypeFromString(c string) ResultContentType {
	switch c {
	case "stringJSON":
		return ResultContentType_stringJSON
	case "stringPlain":
		return ResultContentType_stringPlain
	case "int64":
		return ResultContentType_int64
	case "bytes":
		return ResultContentType_bytes

	default:
		return 0
	}
}

type ResultContentType_List = capnp.EnumList[ResultContentType]

func NewResultContentType_List(s *capnp.Segment, sz int32) (ResultContentType_List, error) {
	return capnp.NewEnumList[ResultContentType](s, sz)
}

type JobResult capnp.Struct

// JobResult_TypeID is the unique identifier for the type JobResult.
const JobResult_TypeID = 0x89d5e64a8e7e9034

func NewJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func NewRootJobResult(s *capnp.Segment) (JobResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobResult(st), err
}

func ReadRootJobResult(msg *capnp.Message) (JobResult, error) {
	root, err := msg.Root()
	return JobResult(root.Struct()), err
}

func (s JobResult) String() string {
	str, _ := text.Marshal(0x89d5e64a8e7e9034, capnp.Struct(s))
	return str
}

func (s JobResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobResult) DecodeFromPtr(p capnp.Ptr) JobResult {
	return JobResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobResult) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobResult) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobResult) Success() bool {
	return capnp.Struct(s).Bit(16)
}

func (s JobResult) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s JobResult) ContentType() ResultContentType {
	return ResultContentType(capnp.Struct(s).Uint16(4))
}

func (s JobResult) SetContentType(v ResultContentType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s JobResult) Contents() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobResult) HasContents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobResult) SetContents(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobResult_List is a list of JobResult.
type JobResult_List = capnp.StructList[JobResult]

// NewJobResult creates a new list of JobResult.
func NewJobResult_List(s *capnp.Segment, sz int32) (JobResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobResult](l), err
}

// JobResult_Future is a wrapper for a JobResult promised by a client call.
type JobResult_Future struct{ *capnp.Future }

func (f JobResult_Future) Struct() (JobResult, error) {
	p, err := f.Future.Ptr()
	return JobResult(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cVml\x14U\x17>\xcf\xbd\xfb\xd5\xa6\xed" +
	"\xee\xbc[\x92\x97\xf7%n \xd6Hc\x09\xb4\x95\x08" +
	"Q\xf9\x0a\x84.\xb4\xf4\xb6\x15\x95\x8f\xe8n\xf7\xbal" +
	"\xbb;\xb3\xceL\x03\x1bD\x08\xa1\x06\x8c M \x88" +
	"\xe1\x07hL\xfcC\xd4\x1f\x98\xa0!\x11\x13\x83\x11\x7f" +
	"iH\x0cJT\x12$\x18\x8d\xda\x98`T\x18sg" +
	"\x96\xdd\xe9v\x0b\xfe\xda\x99{\xcf\xdes\x9e\xe7<\xe7" +
	"\xb9\xb3p3_\x1eX\xd4\xfcj\x88\x98X\x1f\x0c9" +
	"W\xfe\xfa\xf3\xb3\x9e\xa7\xf3{I\xb4\x00\xce\xaf__" +
	"l\xfd\xe6\xc2\xef\x9fP\x10a\xa2x\x07\xbf\x1a_\xc2" +
	"\xd5\xd3\xc3|;\xc1\xe9>\xfc\xe2\xa1\xe4\x0f\x97\x0e\xd4" +
	"\x0d\x9e\xe0\x1f\xc7\x8f\xbb\xc1G\xf9u\x82sr\xe7\xb7" +
	"\x17\x1a\x16?v\x94\xc4\x1c\xc0\xd17n\xda\xd5\xe5\x98" +
	"o\xd0\x13\x08#\x00t\x8d\x05\x1aA\x88\xef\x0a\xa8\xd8" +
	"\xcd;W\xaf\xb8\xf9\xd3\xd8\xb1\xba\x07o\x0dN\xc6s" +
	"A\xf5$\x83\xaa\x0a#\x7f\xfa\x8fH\xb0\xf15\xd2Z" +
	"X5\x96\xd0\xf5V\xf0?\x88\x9fq#\xdf\x0bf\x09" +
	"\xce\xe5y\x9fv\xff\xb6\xe7\xf6\xc9z\xc7v]\x092" +
	"\xc4o\xb8\xd1\xd7\xdcs+%\xd6+bu\xe8j\\" +
	"\x84\xd4SoH\x05\x8f\xfe\x7f\xfb\xc6S\x13\xec]\xd2" +
	"Z\xa6\xc5\x1e\x0cM\xc6\x8f\xbb\xb1GC\xcb\x08\xceW" +
	"\xcb\x1e\xdf\xbao\x83<_{\xb0K\xd6\x99\xd0d\xfc" +
	"\xbc\x0a\xee:\x17J\x80\xe0|x\xe9\x8b\xb67\x9fZ" +
	"tq\x1a\xbc\xef\xc3\x0c\xf1\x9f\xc3\xeaO7\xc2\x0a\xde" +
	"\xc8s\x1f\xec|\xe9\xd4w_\xd6\x857+\xd2\x89x" +
	"[DE\xcf\x8d\xa8\x8a\xfb\xbbn\xdaZ,{\xa5^" +
	"\xc5\xe3\x91\x1f\xe3\x13n\xec\xc1\x88\xaax\xfc\xf5g\xae" +
	"\x1f:\xf2\xc0\xb5i5\x9c\x8e0\xc4\xcf\xba\x91g\"" +
	"\xc7\x08\xce\xadc\x98\xd3\xd8\xf7\xf9/$\xee\x83\xaf\x8f" +
	"\xaa\xcb\x1c\xe8jh\xf8\x9f\xea\xb2\xd6\xf0\x0e\xc1\x99\xf7" +
	"\xfeG\x91\x8d\x93\xedNm\xbd\xcc\xedX\xc3\xe5\xf8\xb9" +
	"\x06\xf5t\xb6\xe1:u8\x05iY\xa9\xac\\\xc0\x86" +
	"SE\xbd\xb84i\xa4\xd7\x1b\xd9^iY\xe1TV" +
	"\xf6\x03\"\xc2\x03D\x01\x10i\xf3W\x12\x89\xfb9\xc4" +
	"B\x06\xa0\x15j\xadC\xad=\xc8!\xba\x19v\xe7\x8d" +
	"\xec\xba\x9c\x9eA\x98\x18\xc2\x84\xdd\xc3\x86nK\xddF" +
	"314\x13\xea\xe4\x1a\x90\xd6X\xde&\x95'V\xc9" +
	"\x93J\x13\x89g9D\x9eAC\xccK\x94S\x892" +
	"\x1c\xa2\xc8\xa01\xd6\x0aF\xa4\x15Td\x9eC\xec`" +
	"\x00o\x05'\xd2\xc6\x92D\xc2\xe6\x10{\x18\x9c\xed\x86" +
	"9*\xcd\x1e\x9d\xc2\x19\xb9\xa3R\x9756<,-" +
	"\x0b \x06%\x85r\x9dC\x14.\x15%\xa2Ui\x10" +
	"\x10\xad\xee[D4\x0d\x0b\xf7\xb0\xf4z\xafCF\x9f" +
	"\x91\x91\x0b\xd2F\xa6D\xa4 59\x8eW\x7f\xaa\x93" +
	"Hl\xe1\x10\xdb\x18\x9aq\xdb\xf1\x00\xc8d\x15U3" +
	"\xbb\xe5x\x10\x0a\xc9*\xacf\xfe\xb7\xd3\x8a@\x0d\xb0" +
	"\x84,\x14\xed\x12\x85\x9c\x94e\xe5\xb2zOF\x95\x16" +
	"\xabN\x0b\x011\x82c\xd9)\xd3N\x1aio\xb72" +
	"\x1f\xe5\xddT\xda\xf0\xedVt[\xde\xadiV\x19\xe0" +
	"\x1a\xd3H\x14\x14\xc6\x1ai\xb4\xfb\xa5\x01\x9f^\xb5\x8e" +
	"vb\xd1Q%\x8bh\xd5R<b\xa3\x8a\xa7\x19\x98" +
	"\\c\x1an\x9eu9\x1d\x19W\x1f.a*\x11\xa0" +
	"\xcdU?L\x9b=B\x04\xae\xcd\x1a \x8a\x16sz" +
	"6Z4\xf4\xac3b\xa4\x07\xed\x94-):X\xd2" +
	"\x87\xd5\xab+3\x82]\x9b+\xe9F\x9a\xb6\xcc\x94\xb3" +
	"R\x0d\xactU\xddw\x14\xbfH5\xf2!\x0e\xf1\xc8" +
	"4}E\x88!BH\x8c\x18\xe9\x9e\x0c\x9a\x88\xa1i" +
	"F\"\x87\x8c\xbe\xf0\xbdi\xac\x98\xfb\x14\x1a+\xb6Q" +
	"\x8f\xc6r\x9a\x15ea\xf4\xca\x84\xbb\xae\x12\x05*\x89" +
	"\x9a\x97\x12\x89\x08\x87heX\xa6\x1b\x19\xd9\x93\xb9\xcb" +
	"\x94\xba\x1c\xf9\x0fj\xad\x1c\xb4K1\xf4\x02\x87\xd8_" +
	"eh\\1\xb4\x87C\xbc\xa2F\x15\x9e\xd2\x0f\xec%" +
	"\x12\xfb9\xc4\x11\x06\x8d\xc3\x13\xfa\x84\x92\xf4a\x0eq" +
	"\x82A\x0b0O\xe7\xc7_&\x12'8\xc4\xdb\xff\x92" +
	"\xe0\xa2id\xcdTa%J\xb6\\edduH" +
	"\xdd\x1di\xb9\x83\xdbH\x0c\x8d\x04'\xa7\xdb\xd2,\x9a" +
	"\x12\xb64=\x99\xcc8\xd4\x9e;\xad*\xbbC\xa9\xe8" +
	"\xc9\xa3,\xc4M\xae\x10\xdb\xd2\xae\x10\xe7v\xbaB\x9c" +
	"\xddI\xe4X\xb6\x99\xd3\xb3\xc9A\xe2\x1b\xfa\xca/\xfd" +
	"y\x0a\xa7rz\"\xa7\xdb\x8b\xbb\x13\xe9\x92-\xad\xda" +
	"\\kSz\xc6\xda\x96\x1a\x95\x03\xd2*\x1a\xfa\x94\xbe" +
	"\xf9\x04\xb2\xa9\x8e \x15\x89\x0b9\xc4\xa3\x0c\x8e>V" +
	"xRQF\xdc\xb4\xee\xf8\x9d\xa3\x1a\xdc\x97*HE" +
	"\xc3\x0c\xaaL\x1a\xe9u\xb9|\xbeWZ\xd1:j\xe9" +
	"\xac\xaae\x06q\xd7\xb3Au\x17\xb8\x8c\xfd\xd7el" +
	"\x857\xbaK\xbc\xd1UU\x83k\x1d&\x11\x02\xda|" +
	"\xf5\x16\xd4\xda\x92S\x06\xd9gnNN\xcf\xd9\x8a#" +
	"J\x0c*\x96\xfc\xd6\xe67\xb2{\xb8\xc9\x82\xb4\xc13" +
	"%\xd1\xe43\xe6\xd5\x0a\xdcr\x0e\xb1\xdeo\xcc=#" +
	"Db-\x87\x18\xf2\x1b\xb3\x18 \x12\xfd\x1cb\x8b\xcf" +
	"\x82\xa7\xda\x0db\xd5\xfb\xb7\xec\xa4>\x03B\xac\xfaq" +
	"W\xdfg\x93\xe5\xd3\x06K\\\x1f\xbe\xdb\xbdX\xee~" +
	"Nu\x7f\x1b\x87\xb0\x19P\xbe\x16\x9fo/\xdf\x1f\xfb" +
	"}\xb36\xae\xfe\xbd\x8fC\x1c\x9e\xe9^\xac7.\xd1" +
	"\xbc\x91\xb5\xd0B\xe8\xe7@\xac\xfa\x19KP\x8b\x95a" +
	"\xa2\xb0-\xcd;c\xf4O\x00\x00\x00\xff\xff\xd0\xe2\xf0" +
	"Z"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x89d5e64a8e7e9034,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xb00291a156771b6b,
			0xc1654f845d3e3fd8,
			0xcb3158a325d2d5bb,
			0xd3e0a1867bba666a,
			0xdd67101174f73350,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xff2af25608c0b622,
		},
		Compressed: true,
	})
}
