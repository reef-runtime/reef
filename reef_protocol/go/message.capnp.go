// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type MessageToNodeKind uint16

// MessageToNodeKind_TypeID is the unique identifier for the type MessageToNodeKind.
const MessageToNodeKind_TypeID = 0xe526948ee75f9a85

// Values of MessageToNodeKind.
const (
	MessageToNodeKind_ping          MessageToNodeKind = 0
	MessageToNodeKind_pong          MessageToNodeKind = 1
	MessageToNodeKind_assignID      MessageToNodeKind = 2
	MessageToNodeKind_initHandShake MessageToNodeKind = 3
	MessageToNodeKind_startJob      MessageToNodeKind = 4
)

// String returns the enum's constant name.
func (c MessageToNodeKind) String() string {
	switch c {
	case MessageToNodeKind_ping:
		return "ping"
	case MessageToNodeKind_pong:
		return "pong"
	case MessageToNodeKind_assignID:
		return "assignID"
	case MessageToNodeKind_initHandShake:
		return "initHandShake"
	case MessageToNodeKind_startJob:
		return "startJob"

	default:
		return ""
	}
}

// MessageToNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageToNodeKindFromString(c string) MessageToNodeKind {
	switch c {
	case "ping":
		return MessageToNodeKind_ping
	case "pong":
		return MessageToNodeKind_pong
	case "assignID":
		return MessageToNodeKind_assignID
	case "initHandShake":
		return MessageToNodeKind_initHandShake
	case "startJob":
		return MessageToNodeKind_startJob

	default:
		return 0
	}
}

type MessageToNodeKind_List = capnp.EnumList[MessageToNodeKind]

func NewMessageToNodeKind_List(s *capnp.Segment, sz int32) (MessageToNodeKind_List, error) {
	return capnp.NewEnumList[MessageToNodeKind](s, sz)
}

type MessageToNode capnp.Struct
type MessageToNode_body MessageToNode
type MessageToNode_body_Which uint16

const (
	MessageToNode_body_Which_empty    MessageToNode_body_Which = 0
	MessageToNode_body_Which_assignID MessageToNode_body_Which = 1
	MessageToNode_body_Which_startJob MessageToNode_body_Which = 2
	MessageToNode_body_Which_abortJob MessageToNode_body_Which = 3
)

func (w MessageToNode_body_Which) String() string {
	const s = "emptyassignIDstartJobabortJob"
	switch w {
	case MessageToNode_body_Which_empty:
		return s[0:5]
	case MessageToNode_body_Which_assignID:
		return s[5:13]
	case MessageToNode_body_Which_startJob:
		return s[13:21]
	case MessageToNode_body_Which_abortJob:
		return s[21:29]

	}
	return "MessageToNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageToNode_TypeID is the unique identifier for the type MessageToNode.
const MessageToNode_TypeID = 0xa272ff337d5a566e

func NewMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func NewRootMessageToNode(s *capnp.Segment) (MessageToNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageToNode(st), err
}

func ReadRootMessageToNode(msg *capnp.Message) (MessageToNode, error) {
	root, err := msg.Root()
	return MessageToNode(root.Struct()), err
}

func (s MessageToNode) String() string {
	str, _ := text.Marshal(0xa272ff337d5a566e, capnp.Struct(s))
	return str
}

func (s MessageToNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageToNode) DecodeFromPtr(p capnp.Ptr) MessageToNode {
	return MessageToNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageToNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageToNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode) Kind() MessageToNodeKind {
	return MessageToNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageToNode) SetKind(v MessageToNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageToNode) Body() MessageToNode_body { return MessageToNode_body(s) }

func (s MessageToNode_body) Which() MessageToNode_body_Which {
	return MessageToNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageToNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageToNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageToNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageToNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageToNode_body) AssignID() (AssignIDMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != assignID")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AssignIDMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAssignID() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAssignID(v AssignIDMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAssignID sets the assignID field to a newly
// allocated AssignIDMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAssignID() (AssignIDMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewAssignIDMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AssignIDMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) StartJob() (JobInitializationMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != startJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobInitializationMessage(p.Struct()), err
}

func (s MessageToNode_body) HasStartJob() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetStartJob(v JobInitializationMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartJob sets the startJob field to a newly
// allocated JobInitializationMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewStartJob() (JobInitializationMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobInitializationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobInitializationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageToNode_body) AbortJob() (JobKillMessage, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != abortJob")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobKillMessage(p.Struct()), err
}

func (s MessageToNode_body) HasAbortJob() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageToNode_body) SetAbortJob(v JobKillMessage) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbortJob sets the abortJob field to a newly
// allocated JobKillMessage struct, preferring placement in s's segment.
func (s MessageToNode_body) NewAbortJob() (JobKillMessage, error) {
	capnp.Struct(s).SetUint16(2, 3)
	ss, err := NewJobKillMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobKillMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageToNode_List is a list of MessageToNode.
type MessageToNode_List = capnp.StructList[MessageToNode]

// NewMessageToNode creates a new list of MessageToNode.
func NewMessageToNode_List(s *capnp.Segment, sz int32) (MessageToNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageToNode](l), err
}

// MessageToNode_Future is a wrapper for a MessageToNode promised by a client call.
type MessageToNode_Future struct{ *capnp.Future }

func (f MessageToNode_Future) Struct() (MessageToNode, error) {
	p, err := f.Future.Ptr()
	return MessageToNode(p.Struct()), err
}
func (p MessageToNode_Future) Body() MessageToNode_body_Future {
	return MessageToNode_body_Future{p.Future}
}

// MessageToNode_body_Future is a wrapper for a MessageToNode_body promised by a client call.
type MessageToNode_body_Future struct{ *capnp.Future }

func (f MessageToNode_body_Future) Struct() (MessageToNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageToNode_body(p.Struct()), err
}
func (p MessageToNode_body_Future) AssignID() AssignIDMessage_Future {
	return AssignIDMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) StartJob() JobInitializationMessage_Future {
	return JobInitializationMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageToNode_body_Future) AbortJob() JobKillMessage_Future {
	return JobKillMessage_Future{Future: p.Future.Field(0, nil)}
}

type AssignIDMessage capnp.Struct

// AssignIDMessage_TypeID is the unique identifier for the type AssignIDMessage.
const AssignIDMessage_TypeID = 0xf62321059b987c55

func NewAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func NewRootAssignIDMessage(s *capnp.Segment) (AssignIDMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AssignIDMessage(st), err
}

func ReadRootAssignIDMessage(msg *capnp.Message) (AssignIDMessage, error) {
	root, err := msg.Root()
	return AssignIDMessage(root.Struct()), err
}

func (s AssignIDMessage) String() string {
	str, _ := text.Marshal(0xf62321059b987c55, capnp.Struct(s))
	return str
}

func (s AssignIDMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AssignIDMessage) DecodeFromPtr(p capnp.Ptr) AssignIDMessage {
	return AssignIDMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AssignIDMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AssignIDMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AssignIDMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AssignIDMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AssignIDMessage) NodeID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AssignIDMessage) HasNodeID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AssignIDMessage) SetNodeID(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AssignIDMessage_List is a list of AssignIDMessage.
type AssignIDMessage_List = capnp.StructList[AssignIDMessage]

// NewAssignIDMessage creates a new list of AssignIDMessage.
func NewAssignIDMessage_List(s *capnp.Segment, sz int32) (AssignIDMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AssignIDMessage](l), err
}

// AssignIDMessage_Future is a wrapper for a AssignIDMessage promised by a client call.
type AssignIDMessage_Future struct{ *capnp.Future }

func (f AssignIDMessage_Future) Struct() (AssignIDMessage, error) {
	p, err := f.Future.Ptr()
	return AssignIDMessage(p.Struct()), err
}

type JobInitializationMessage capnp.Struct

// JobInitializationMessage_TypeID is the unique identifier for the type JobInitializationMessage.
const JobInitializationMessage_TypeID = 0xc1cb98e422996a9c

func NewJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func NewRootJobInitializationMessage(s *capnp.Segment) (JobInitializationMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return JobInitializationMessage(st), err
}

func ReadRootJobInitializationMessage(msg *capnp.Message) (JobInitializationMessage, error) {
	root, err := msg.Root()
	return JobInitializationMessage(root.Struct()), err
}

func (s JobInitializationMessage) String() string {
	str, _ := text.Marshal(0xc1cb98e422996a9c, capnp.Struct(s))
	return str
}

func (s JobInitializationMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobInitializationMessage) DecodeFromPtr(p capnp.Ptr) JobInitializationMessage {
	return JobInitializationMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobInitializationMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobInitializationMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobInitializationMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobInitializationMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobInitializationMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobInitializationMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobInitializationMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobInitializationMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobInitializationMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobInitializationMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s JobInitializationMessage) ProgramByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s JobInitializationMessage) HasProgramByteCode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s JobInitializationMessage) SetProgramByteCode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// JobInitializationMessage_List is a list of JobInitializationMessage.
type JobInitializationMessage_List = capnp.StructList[JobInitializationMessage]

// NewJobInitializationMessage creates a new list of JobInitializationMessage.
func NewJobInitializationMessage_List(s *capnp.Segment, sz int32) (JobInitializationMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[JobInitializationMessage](l), err
}

// JobInitializationMessage_Future is a wrapper for a JobInitializationMessage promised by a client call.
type JobInitializationMessage_Future struct{ *capnp.Future }

func (f JobInitializationMessage_Future) Struct() (JobInitializationMessage, error) {
	p, err := f.Future.Ptr()
	return JobInitializationMessage(p.Struct()), err
}

type JobKillMessage capnp.Struct

// JobKillMessage_TypeID is the unique identifier for the type JobKillMessage.
const JobKillMessage_TypeID = 0xdd67101174f73350

func NewJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func NewRootJobKillMessage(s *capnp.Segment) (JobKillMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JobKillMessage(st), err
}

func ReadRootJobKillMessage(msg *capnp.Message) (JobKillMessage, error) {
	root, err := msg.Root()
	return JobKillMessage(root.Struct()), err
}

func (s JobKillMessage) String() string {
	str, _ := text.Marshal(0xdd67101174f73350, capnp.Struct(s))
	return str
}

func (s JobKillMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobKillMessage) DecodeFromPtr(p capnp.Ptr) JobKillMessage {
	return JobKillMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobKillMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobKillMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobKillMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobKillMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobKillMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobKillMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobKillMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobKillMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobKillMessage_List is a list of JobKillMessage.
type JobKillMessage_List = capnp.StructList[JobKillMessage]

// NewJobKillMessage creates a new list of JobKillMessage.
func NewJobKillMessage_List(s *capnp.Segment, sz int32) (JobKillMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JobKillMessage](l), err
}

// JobKillMessage_Future is a wrapper for a JobKillMessage promised by a client call.
type JobKillMessage_Future struct{ *capnp.Future }

func (f JobKillMessage_Future) Struct() (JobKillMessage, error) {
	p, err := f.Future.Ptr()
	return JobKillMessage(p.Struct()), err
}

type MessageFromNodeKind uint16

// MessageFromNodeKind_TypeID is the unique identifier for the type MessageFromNodeKind.
const MessageFromNodeKind_TypeID = 0x980a0508f8ad6c6f

// Values of MessageFromNodeKind.
const (
	MessageFromNodeKind_ping              MessageFromNodeKind = 0
	MessageFromNodeKind_pong              MessageFromNodeKind = 1
	MessageFromNodeKind_jobLog            MessageFromNodeKind = 2
	MessageFromNodeKind_jobProgressReport MessageFromNodeKind = 3
)

// String returns the enum's constant name.
func (c MessageFromNodeKind) String() string {
	switch c {
	case MessageFromNodeKind_ping:
		return "ping"
	case MessageFromNodeKind_pong:
		return "pong"
	case MessageFromNodeKind_jobLog:
		return "jobLog"
	case MessageFromNodeKind_jobProgressReport:
		return "jobProgressReport"

	default:
		return ""
	}
}

// MessageFromNodeKindFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MessageFromNodeKindFromString(c string) MessageFromNodeKind {
	switch c {
	case "ping":
		return MessageFromNodeKind_ping
	case "pong":
		return MessageFromNodeKind_pong
	case "jobLog":
		return MessageFromNodeKind_jobLog
	case "jobProgressReport":
		return MessageFromNodeKind_jobProgressReport

	default:
		return 0
	}
}

type MessageFromNodeKind_List = capnp.EnumList[MessageFromNodeKind]

func NewMessageFromNodeKind_List(s *capnp.Segment, sz int32) (MessageFromNodeKind_List, error) {
	return capnp.NewEnumList[MessageFromNodeKind](s, sz)
}

type MessageFromNode capnp.Struct
type MessageFromNode_body MessageFromNode
type MessageFromNode_body_Which uint16

const (
	MessageFromNode_body_Which_empty             MessageFromNode_body_Which = 0
	MessageFromNode_body_Which_jobLog            MessageFromNode_body_Which = 1
	MessageFromNode_body_Which_jobProgressReport MessageFromNode_body_Which = 2
)

func (w MessageFromNode_body_Which) String() string {
	const s = "emptyjobLogjobProgressReport"
	switch w {
	case MessageFromNode_body_Which_empty:
		return s[0:5]
	case MessageFromNode_body_Which_jobLog:
		return s[5:11]
	case MessageFromNode_body_Which_jobProgressReport:
		return s[11:28]

	}
	return "MessageFromNode_body_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageFromNode_TypeID is the unique identifier for the type MessageFromNode.
const MessageFromNode_TypeID = 0x9775ecf741457b5b

func NewMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func NewRootMessageFromNode(s *capnp.Segment) (MessageFromNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageFromNode(st), err
}

func ReadRootMessageFromNode(msg *capnp.Message) (MessageFromNode, error) {
	root, err := msg.Root()
	return MessageFromNode(root.Struct()), err
}

func (s MessageFromNode) String() string {
	str, _ := text.Marshal(0x9775ecf741457b5b, capnp.Struct(s))
	return str
}

func (s MessageFromNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageFromNode) DecodeFromPtr(p capnp.Ptr) MessageFromNode {
	return MessageFromNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageFromNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageFromNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode) Kind() MessageFromNodeKind {
	return MessageFromNodeKind(capnp.Struct(s).Uint16(0))
}

func (s MessageFromNode) SetKind(v MessageFromNodeKind) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s MessageFromNode) Body() MessageFromNode_body { return MessageFromNode_body(s) }

func (s MessageFromNode_body) Which() MessageFromNode_body_Which {
	return MessageFromNode_body_Which(capnp.Struct(s).Uint16(2))
}
func (s MessageFromNode_body) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageFromNode_body) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageFromNode_body) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageFromNode_body) SetEmpty() {
	capnp.Struct(s).SetUint16(2, 0)

}

func (s MessageFromNode_body) JobLog() (JobLogMessage, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != jobLog")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobLogMessage(p.Struct()), err
}

func (s MessageFromNode_body) HasJobLog() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobLog(v JobLogMessage) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobLog sets the jobLog field to a newly
// allocated JobLogMessage struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobLog() (JobLogMessage, error) {
	capnp.Struct(s).SetUint16(2, 1)
	ss, err := NewJobLogMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobLogMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MessageFromNode_body) JobProgressReport() (JobProgressReportMessage, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != jobProgressReport")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return JobProgressReportMessage(p.Struct()), err
}

func (s MessageFromNode_body) HasJobProgressReport() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageFromNode_body) SetJobProgressReport(v JobProgressReportMessage) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewJobProgressReport sets the jobProgressReport field to a newly
// allocated JobProgressReportMessage struct, preferring placement in s's segment.
func (s MessageFromNode_body) NewJobProgressReport() (JobProgressReportMessage, error) {
	capnp.Struct(s).SetUint16(2, 2)
	ss, err := NewJobProgressReportMessage(capnp.Struct(s).Segment())
	if err != nil {
		return JobProgressReportMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MessageFromNode_List is a list of MessageFromNode.
type MessageFromNode_List = capnp.StructList[MessageFromNode]

// NewMessageFromNode creates a new list of MessageFromNode.
func NewMessageFromNode_List(s *capnp.Segment, sz int32) (MessageFromNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MessageFromNode](l), err
}

// MessageFromNode_Future is a wrapper for a MessageFromNode promised by a client call.
type MessageFromNode_Future struct{ *capnp.Future }

func (f MessageFromNode_Future) Struct() (MessageFromNode, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode(p.Struct()), err
}
func (p MessageFromNode_Future) Body() MessageFromNode_body_Future {
	return MessageFromNode_body_Future{p.Future}
}

// MessageFromNode_body_Future is a wrapper for a MessageFromNode_body promised by a client call.
type MessageFromNode_body_Future struct{ *capnp.Future }

func (f MessageFromNode_body_Future) Struct() (MessageFromNode_body, error) {
	p, err := f.Future.Ptr()
	return MessageFromNode_body(p.Struct()), err
}
func (p MessageFromNode_body_Future) JobLog() JobLogMessage_Future {
	return JobLogMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p MessageFromNode_body_Future) JobProgressReport() JobProgressReportMessage_Future {
	return JobProgressReportMessage_Future{Future: p.Future.Field(0, nil)}
}

type HandshakeRespondMessage capnp.Struct

// HandshakeRespondMessage_TypeID is the unique identifier for the type HandshakeRespondMessage.
const HandshakeRespondMessage_TypeID = 0xd3e0a1867bba666a

func NewHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func NewRootHandshakeRespondMessage(s *capnp.Segment) (HandshakeRespondMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HandshakeRespondMessage(st), err
}

func ReadRootHandshakeRespondMessage(msg *capnp.Message) (HandshakeRespondMessage, error) {
	root, err := msg.Root()
	return HandshakeRespondMessage(root.Struct()), err
}

func (s HandshakeRespondMessage) String() string {
	str, _ := text.Marshal(0xd3e0a1867bba666a, capnp.Struct(s))
	return str
}

func (s HandshakeRespondMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HandshakeRespondMessage) DecodeFromPtr(p capnp.Ptr) HandshakeRespondMessage {
	return HandshakeRespondMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HandshakeRespondMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HandshakeRespondMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HandshakeRespondMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HandshakeRespondMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HandshakeRespondMessage) NumWorkers() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HandshakeRespondMessage) SetNumWorkers(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HandshakeRespondMessage) NodeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HandshakeRespondMessage) HasNodeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HandshakeRespondMessage) NodeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HandshakeRespondMessage) SetNodeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HandshakeRespondMessage_List is a list of HandshakeRespondMessage.
type HandshakeRespondMessage_List = capnp.StructList[HandshakeRespondMessage]

// NewHandshakeRespondMessage creates a new list of HandshakeRespondMessage.
func NewHandshakeRespondMessage_List(s *capnp.Segment, sz int32) (HandshakeRespondMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HandshakeRespondMessage](l), err
}

// HandshakeRespondMessage_Future is a wrapper for a HandshakeRespondMessage promised by a client call.
type HandshakeRespondMessage_Future struct{ *capnp.Future }

func (f HandshakeRespondMessage_Future) Struct() (HandshakeRespondMessage, error) {
	p, err := f.Future.Ptr()
	return HandshakeRespondMessage(p.Struct()), err
}

type JobStartedMessage capnp.Struct

// JobStartedMessage_TypeID is the unique identifier for the type JobStartedMessage.
const JobStartedMessage_TypeID = 0xa0fe80f134c822da

func NewJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func NewRootJobStartedMessage(s *capnp.Segment) (JobStartedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobStartedMessage(st), err
}

func ReadRootJobStartedMessage(msg *capnp.Message) (JobStartedMessage, error) {
	root, err := msg.Root()
	return JobStartedMessage(root.Struct()), err
}

func (s JobStartedMessage) String() string {
	str, _ := text.Marshal(0xa0fe80f134c822da, capnp.Struct(s))
	return str
}

func (s JobStartedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobStartedMessage) DecodeFromPtr(p capnp.Ptr) JobStartedMessage {
	return JobStartedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobStartedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobStartedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobStartedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobStartedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobStartedMessage) WorkerIndex() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s JobStartedMessage) SetWorkerIndex(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s JobStartedMessage) JobID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JobStartedMessage) HasJobID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobStartedMessage) JobIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JobStartedMessage) SetJobID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JobStartedMessage_List is a list of JobStartedMessage.
type JobStartedMessage_List = capnp.StructList[JobStartedMessage]

// NewJobStartedMessage creates a new list of JobStartedMessage.
func NewJobStartedMessage_List(s *capnp.Segment, sz int32) (JobStartedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobStartedMessage](l), err
}

// JobStartedMessage_Future is a wrapper for a JobStartedMessage promised by a client call.
type JobStartedMessage_Future struct{ *capnp.Future }

func (f JobStartedMessage_Future) Struct() (JobStartedMessage, error) {
	p, err := f.Future.Ptr()
	return JobStartedMessage(p.Struct()), err
}

type JobLogMessage capnp.Struct

// JobLogMessage_TypeID is the unique identifier for the type JobLogMessage.
const JobLogMessage_TypeID = 0x826c5949cafafbdd

func NewJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func NewRootJobLogMessage(s *capnp.Segment) (JobLogMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return JobLogMessage(st), err
}

func ReadRootJobLogMessage(msg *capnp.Message) (JobLogMessage, error) {
	root, err := msg.Root()
	return JobLogMessage(root.Struct()), err
}

func (s JobLogMessage) String() string {
	str, _ := text.Marshal(0x826c5949cafafbdd, capnp.Struct(s))
	return str
}

func (s JobLogMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobLogMessage) DecodeFromPtr(p capnp.Ptr) JobLogMessage {
	return JobLogMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobLogMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobLogMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobLogMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobLogMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobLogMessage) LogKind() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobLogMessage) SetLogKind(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobLogMessage) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s JobLogMessage) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s JobLogMessage) Content() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s JobLogMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JobLogMessage) SetContent(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// JobLogMessage_List is a list of JobLogMessage.
type JobLogMessage_List = capnp.StructList[JobLogMessage]

// NewJobLogMessage creates a new list of JobLogMessage.
func NewJobLogMessage_List(s *capnp.Segment, sz int32) (JobLogMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[JobLogMessage](l), err
}

// JobLogMessage_Future is a wrapper for a JobLogMessage promised by a client call.
type JobLogMessage_Future struct{ *capnp.Future }

func (f JobLogMessage_Future) Struct() (JobLogMessage, error) {
	p, err := f.Future.Ptr()
	return JobLogMessage(p.Struct()), err
}

type JobProgressReportMessage capnp.Struct

// JobProgressReportMessage_TypeID is the unique identifier for the type JobProgressReportMessage.
const JobProgressReportMessage_TypeID = 0xd37bd303fd40b22f

func NewJobProgressReportMessage(s *capnp.Segment) (JobProgressReportMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JobProgressReportMessage(st), err
}

func NewRootJobProgressReportMessage(s *capnp.Segment) (JobProgressReportMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JobProgressReportMessage(st), err
}

func ReadRootJobProgressReportMessage(msg *capnp.Message) (JobProgressReportMessage, error) {
	root, err := msg.Root()
	return JobProgressReportMessage(root.Struct()), err
}

func (s JobProgressReportMessage) String() string {
	str, _ := text.Marshal(0xd37bd303fd40b22f, capnp.Struct(s))
	return str
}

func (s JobProgressReportMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JobProgressReportMessage) DecodeFromPtr(p capnp.Ptr) JobProgressReportMessage {
	return JobProgressReportMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JobProgressReportMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JobProgressReportMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JobProgressReportMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JobProgressReportMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JobProgressReportMessage) WorkerIndex() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s JobProgressReportMessage) SetWorkerIndex(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s JobProgressReportMessage) Progress() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s JobProgressReportMessage) SetProgress(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

// JobProgressReportMessage_List is a list of JobProgressReportMessage.
type JobProgressReportMessage_List = capnp.StructList[JobProgressReportMessage]

// NewJobProgressReportMessage creates a new list of JobProgressReportMessage.
func NewJobProgressReportMessage_List(s *capnp.Segment, sz int32) (JobProgressReportMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[JobProgressReportMessage](l), err
}

// JobProgressReportMessage_Future is a wrapper for a JobProgressReportMessage promised by a client call.
type JobProgressReportMessage_Future struct{ *capnp.Future }

func (f JobProgressReportMessage_Future) Struct() (JobProgressReportMessage, error) {
	p, err := f.Future.Ptr()
	return JobProgressReportMessage(p.Struct()), err
}

const schema_c5f4c7dc14cbdbf0 = "x\xda\x8cV]h\x1cU\x14>\xe7\xde\xd9\x9d5d" +
	"\xb3;\xce\xbe(\xad!\xd5\x8a-&&\xd9Vd1" +
	"$\xa9I\xe9n\xb2!\xb7M\xfc\xa9\x05\x99\xed\\\xb7" +
	"\x93\xec\xce]v&\xb41JjA\xdf\x14,\x96\xc6" +
	"?h}\xf3\xa1\x08\x05\x1f*\xf8\xe0\x83T\xaco\xc1" +
	"\x175\xd4\x16\xa5(\x8aZ\xc4\x8a\x9a\x8e\xdc\xd9\x9fY" +
	"\xb7\xb3\xd6\xbc\xe4\xee\xb9\x87{\xbe\xf3\x9d\xef;\xbb\x83" +
	"\xe7\xc9\x982\x14\xbf\x1c\x01\xc2&\"Qo\xe3\xaf?" +
	"?\xcb>U:\x01\xac\x07\xd1\xfb\xe5\xabK\xa9\xaf/" +
	"\xfe\xf6\x09DP\x05\xd0\xbf W\xf5+D\x9e6\xc8" +
	"\xfb\x80\xde\x99\x95\xcb\x17\xefxx\xe4\x14\xb0-\x88\x9e" +
	"\xfd\xf8\xc1\x17\xd2^\xf5]\x98G\x15\x15\xc4\xf42\xed" +
	"B@\xfdEz\x0d\xd0{zer\xfc\xc6\x8fK\xa7" +
	"C\x1f6\x94\xebzY\x91'K9\x0a\xe8\x89\xd2\xb9" +
	"?b\x91\xae5\xd0zH\x90\x0b\x98~O\xb9\x13\xf5" +
	"\x0b~\xe6\x07J\x11\xd0\xfbr\xdb\xa7\xbb~=~\xf3" +
	"L\xd8\xb3\xe9+\x0aA\xfd'?\xfb{\xff\xdd&\xc4" +
	"0\x10\xd9\xc8U}>\"O,\"\x93\xdf^xc" +
	"\xdb\xb7k\x97>nO\x96\x04\xa4_\x8bdP?\xeb" +
	"g\xbf\x13\x91\\<t~l\x93\xae\xaf\xac\xb7e\xcb" +
	"\xe2\xe9\x91h\x06\xf5|\xd4/\x12\x95O/<\xfb\xe1" +
	"\xca\xcbg\xbfY\x0fE}.:\x8c\xfaG~\xf6\x05" +
	"?{6}\xc3\xd5\x92\xc5\x0d\xd0zn\x01\xbdU\xfd" +
	"A\xdf\xa1\xca\xd3vu\x14\xd0{\xe9\xcdg\xae\xbd\xfa" +
	"\xfa\xfd\xdf\xdd\xc2\xdc\xa4JPg~f^]\x05\xf4" +
	"6O\xe3\x96\xae\x99\xcf\x7f\x06v\x0f\xb6\x8cG\x0e\x8f" +
	"\"\xa6_Q\xef\x96\xc3;\xa5\xca\xe6\xe6\x9f_{+" +
	"\xd2w\xef\xefa\x08v\xc7\xae\xeb\xe31y\x1a\x89\x8d" +
	"B\xbfW\xe6\x8ec\x14\xf9\x009lT\xecJ&'" +
	"\x0a\xd3\xa2\x98\xe7\x8e\xa3\x1aE>\x8b\xc8\xba\xa9\x02\xa0" +
	" \x806\xb9\x07\x80\x8dQd\xd3\x045\xc4\x14\xca`" +
	"\xb6\x00\xc0\xf6Qds\x04\x91\xa4\x90\x00hL&N" +
	"SdO\x12\\-\x89\xe2\x94e\x9b\xa8\x02A\x15\xd0" +
	";*\xaa\x8b\xbc\x9a\xb5A5\xf9\xb1Ft\xf5\xb0\xb0" +
	"]n\xbb\x18\x07\x82q\xc0&,Z\x83\x95\xaf}\x9c" +
	"\x133\xc2\xe4\x03\x05a.\x03\xb0$U\xba=\xaf\x06" +
	"\xc3\x18\x06`\x87(\xb2#\x04\xe3x\xd3\xab\x01\xe19" +
	"\x00fRd\x15\x82q\xb2\xe9\xa5\x90\x02he\x19-" +
	"Qd\xc7\x08\xc6\xe9\xdf^\x0a\x15\x00mIF]\x8a" +
	"\xec8\xc1^^\xae\xb8\xcb\x10\xf5\x0c\xc7\xb1\x8avv" +
	"\x02\x000\x19\xf0\x0a\x88I@\xcfq\x8d\xaa\x9b\x13\x85" +
	"\xdamS\x80\xf5[\xa3 Zn\x9b\xaa\xa8\xdf\xb6\xf1" +
	"^opoU\xf4\x96e\x8f\x92\xf9X\x93\xf9\x1d;" +
	"\x01\xd8}\x14\xd9 A\xf9\x17\xa8A\xeb\xdf\x09$\xb1" +
	"(\x09N\x04>\x04\xc4\x04`B\xf2\xd4\x81\xc9\xbdU" +
	"\xe1\xd7\x99\xb2l4e\xb1\xa4O\x98,\x84\xa8\xf5\xc9" +
	"\x7fD\xbb+\x03\x80T\xd3N\x02$*\x96]LT" +
	"\x84]\x1c]\xf0%\xe2-\x88\xc2lU\x14\xab\xc8\x1d" +
	"g?\xaf\x88*\xba\xed\xb5r\xa2p@R\xc4\xcdz" +
	"UhkKj\xe7\x01\x8al\x97l\xab6\xc8!9" +
	"\xc8\x07)\xb2GH\xbbVb@0\x06\xd8\xbb \x0a" +
	"\xd9\x09\xec\x06\x82\xdd\x1d\x89\x9c\x133\xea\xediln" +
	"\xc4\x7f\xd1\xd84\xe5\x7f\xd0\x98\x13\x85\xacm\xb9\x96Q" +
	"\xb2\x9e3\\K\xd8\xf9\xd1ZB\x9bed\x87\x13\x14" +
	"\xd9l\xd0a~8p\x8cF\xb0n\x99\x13\x00l\x96" +
	"\";\xf4?\xdb\xaeH\xee\x8d\xf2\x1e\\v\xf9c\xc2" +
	"\xe4\xd0\xc9:\xb9\xfa\x9c\x1acr[\x91\x86\xcf\xa2i" +
	"\xee!\xe9\x89A\x8a\xecQ\xd2\xc1\xb85\x1c\xdcq\xa4" +
	"\xca\x1b\xb16\x04\xfb\x0c\xdbt\x8e\x18\x8b|?w*" +
	"\xc26\xf3\xbc7\x0c\xc0\xc1\x101\xb4\xd6\xb7\x97\xcaO" +
	"H\x08@\xabN\xb3\x94-L>c\x94\xb9,\xdfA" +
	"\x119Q\x98\xb2J\xa5<w\x12\x8d\xaaJ\xb3j\\" +
	"\x0e#F\x91\xa5H'a\x85\xad \xb9\xd1|1\xd7" +
	"\xa6\xb7\xbbf\x9b\xfe\x9am\xb6\xe7|\xdb\xf4U\x01P" +
	"\xd1\xb6\xe6Z\xdd\xd3\xbaQ<\xcb\xb6\\I\x0e\xf4\x1e" +
	"\x90\xf4\xb4\xee\x93\xdb\xd8v\xa0 \xa8\xb9,\x85\xd6\xdc" +
	"\x80\x93\xc3\xc1v\x0e6`6\x13\x080\xd8\x80\xf9\x93" +
	"\x81\xda\x1a\xbb\xae\xeekL\x06?*\xea\xab*\xc4\xe9" +
	"\x98\x0c\xbeA\xc3\x17\xdax\xbd\xcf\xd6a\xb7\xd0\x9e\x09" +
	"h\x1f\x953\xccN4\xf4\xfbO\x00\x00\x00\xff\xff\x88" +
	"\xf6h\xbb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c5f4c7dc14cbdbf0,
		Nodes: []uint64{
			0x826c5949cafafbdd,
			0x953d3609c7df7ba0,
			0x9775ecf741457b5b,
			0x980a0508f8ad6c6f,
			0xa0fe80f134c822da,
			0xa272ff337d5a566e,
			0xc1cb98e422996a9c,
			0xd37bd303fd40b22f,
			0xd3e0a1867bba666a,
			0xdd67101174f73350,
			0xe526948ee75f9a85,
			0xefcc4e0a1c0197fd,
			0xf62321059b987c55,
		},
		Compressed: true,
	})
}
