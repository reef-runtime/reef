// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type CompilerResponse capnp.Struct
type CompilerResponse_Which uint16

const (
	CompilerResponse_Which_fileContent   CompilerResponse_Which = 0
	CompilerResponse_Which_compilerError CompilerResponse_Which = 1
	CompilerResponse_Which_systemError   CompilerResponse_Which = 2
)

func (w CompilerResponse_Which) String() string {
	const s = "fileContentcompilerErrorsystemError"
	switch w {
	case CompilerResponse_Which_fileContent:
		return s[0:11]
	case CompilerResponse_Which_compilerError:
		return s[11:24]
	case CompilerResponse_Which_systemError:
		return s[24:35]

	}
	return "CompilerResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CompilerResponse_TypeID is the unique identifier for the type CompilerResponse.
const CompilerResponse_TypeID = 0x83c671522647a751

func NewCompilerResponse(s *capnp.Segment) (CompilerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CompilerResponse(st), err
}

func NewRootCompilerResponse(s *capnp.Segment) (CompilerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CompilerResponse(st), err
}

func ReadRootCompilerResponse(msg *capnp.Message) (CompilerResponse, error) {
	root, err := msg.Root()
	return CompilerResponse(root.Struct()), err
}

func (s CompilerResponse) String() string {
	str, _ := text.Marshal(0x83c671522647a751, capnp.Struct(s))
	return str
}

func (s CompilerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CompilerResponse) DecodeFromPtr(p capnp.Ptr) CompilerResponse {
	return CompilerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CompilerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s CompilerResponse) Which() CompilerResponse_Which {
	return CompilerResponse_Which(capnp.Struct(s).Uint16(0))
}
func (s CompilerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CompilerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CompilerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CompilerResponse) FileContent() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != fileContent")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s CompilerResponse) HasFileContent() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s CompilerResponse) SetFileContent(v []byte) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetData(0, v)
}

func (s CompilerResponse) CompilerError() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != compilerError")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CompilerResponse) HasCompilerError() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s CompilerResponse) CompilerErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CompilerResponse) SetCompilerError(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(0, v)
}

func (s CompilerResponse) SystemError() (string, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != systemError")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CompilerResponse) HasSystemError() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s CompilerResponse) SystemErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CompilerResponse) SetSystemError(v string) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetText(0, v)
}

// CompilerResponse_List is a list of CompilerResponse.
type CompilerResponse_List = capnp.StructList[CompilerResponse]

// NewCompilerResponse creates a new list of CompilerResponse.
func NewCompilerResponse_List(s *capnp.Segment, sz int32) (CompilerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CompilerResponse](l), err
}

// CompilerResponse_Future is a wrapper for a CompilerResponse promised by a client call.
type CompilerResponse_Future struct{ *capnp.Future }

func (f CompilerResponse_Future) Struct() (CompilerResponse, error) {
	p, err := f.Future.Ptr()
	return CompilerResponse(p.Struct()), err
}

type Language uint16

// Language_TypeID is the unique identifier for the type Language.
const Language_TypeID = 0x869b86db4b8a3a24

// Values of Language.
const (
	Language_c    Language = 0
	Language_rust Language = 1
)

// String returns the enum's constant name.
func (c Language) String() string {
	switch c {
	case Language_c:
		return "c"
	case Language_rust:
		return "rust"

	default:
		return ""
	}
}

// LanguageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LanguageFromString(c string) Language {
	switch c {
	case "c":
		return Language_c
	case "rust":
		return Language_rust

	default:
		return 0
	}
}

type Language_List = capnp.EnumList[Language]

func NewLanguage_List(s *capnp.Segment, sz int32) (Language_List, error) {
	return capnp.NewEnumList[Language](s, sz)
}

type Compiler capnp.Client

// Compiler_TypeID is the unique identifier for the type Compiler.
const Compiler_TypeID = 0xb7df9cf3525b768e

func (c Compiler) Compile(ctx context.Context, params func(Compiler_compile_Params) error) (Compiler_compile_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb7df9cf3525b768e,
			MethodID:      0,
			InterfaceName: "compiler.capnp:Compiler",
			MethodName:    "compile",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Compiler_compile_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Compiler_compile_Results_Future{Future: ans.Future()}, release

}

func (c Compiler) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Compiler) String() string {
	return "Compiler(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Compiler) AddRef() Compiler {
	return Compiler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Compiler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Compiler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Compiler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Compiler) DecodeFromPtr(p capnp.Ptr) Compiler {
	return Compiler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Compiler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Compiler) IsSame(other Compiler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Compiler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Compiler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Compiler_Server is a Compiler with a local implementation.
type Compiler_Server interface {
	Compile(context.Context, Compiler_compile) error
}

// Compiler_NewServer creates a new Server from an implementation of Compiler_Server.
func Compiler_NewServer(s Compiler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Compiler_Methods(nil, s), s, c)
}

// Compiler_ServerToClient creates a new Client from an implementation of Compiler_Server.
// The caller is responsible for calling Release on the returned Client.
func Compiler_ServerToClient(s Compiler_Server) Compiler {
	return Compiler(capnp.NewClient(Compiler_NewServer(s)))
}

// Compiler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Compiler_Methods(methods []server.Method, s Compiler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb7df9cf3525b768e,
			MethodID:      0,
			InterfaceName: "compiler.capnp:Compiler",
			MethodName:    "compile",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Compile(ctx, Compiler_compile{call})
		},
	})

	return methods
}

// Compiler_compile holds the state for a server call to Compiler.compile.
// See server.Call for documentation.
type Compiler_compile struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Compiler_compile) Args() Compiler_compile_Params {
	return Compiler_compile_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Compiler_compile) AllocResults() (Compiler_compile_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Compiler_compile_Results(r), err
}

// Compiler_List is a list of Compiler.
type Compiler_List = capnp.CapList[Compiler]

// NewCompiler_List creates a new list of Compiler.
func NewCompiler_List(s *capnp.Segment, sz int32) (Compiler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Compiler](l), err
}

type Compiler_compile_Params capnp.Struct

// Compiler_compile_Params_TypeID is the unique identifier for the type Compiler_compile_Params.
const Compiler_compile_Params_TypeID = 0xbf58141433c7dd91

func NewCompiler_compile_Params(s *capnp.Segment) (Compiler_compile_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Compiler_compile_Params(st), err
}

func NewRootCompiler_compile_Params(s *capnp.Segment) (Compiler_compile_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Compiler_compile_Params(st), err
}

func ReadRootCompiler_compile_Params(msg *capnp.Message) (Compiler_compile_Params, error) {
	root, err := msg.Root()
	return Compiler_compile_Params(root.Struct()), err
}

func (s Compiler_compile_Params) String() string {
	str, _ := text.Marshal(0xbf58141433c7dd91, capnp.Struct(s))
	return str
}

func (s Compiler_compile_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Compiler_compile_Params) DecodeFromPtr(p capnp.Ptr) Compiler_compile_Params {
	return Compiler_compile_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Compiler_compile_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Compiler_compile_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Compiler_compile_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Compiler_compile_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Compiler_compile_Params) ProgramSrc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Compiler_compile_Params) HasProgramSrc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Compiler_compile_Params) ProgramSrcBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Compiler_compile_Params) SetProgramSrc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Compiler_compile_Params) Language() Language {
	return Language(capnp.Struct(s).Uint16(0))
}

func (s Compiler_compile_Params) SetLanguage(v Language) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Compiler_compile_Params_List is a list of Compiler_compile_Params.
type Compiler_compile_Params_List = capnp.StructList[Compiler_compile_Params]

// NewCompiler_compile_Params creates a new list of Compiler_compile_Params.
func NewCompiler_compile_Params_List(s *capnp.Segment, sz int32) (Compiler_compile_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Compiler_compile_Params](l), err
}

// Compiler_compile_Params_Future is a wrapper for a Compiler_compile_Params promised by a client call.
type Compiler_compile_Params_Future struct{ *capnp.Future }

func (f Compiler_compile_Params_Future) Struct() (Compiler_compile_Params, error) {
	p, err := f.Future.Ptr()
	return Compiler_compile_Params(p.Struct()), err
}

type Compiler_compile_Results capnp.Struct

// Compiler_compile_Results_TypeID is the unique identifier for the type Compiler_compile_Results.
const Compiler_compile_Results_TypeID = 0xb1485f6d015ee01b

func NewCompiler_compile_Results(s *capnp.Segment) (Compiler_compile_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Compiler_compile_Results(st), err
}

func NewRootCompiler_compile_Results(s *capnp.Segment) (Compiler_compile_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Compiler_compile_Results(st), err
}

func ReadRootCompiler_compile_Results(msg *capnp.Message) (Compiler_compile_Results, error) {
	root, err := msg.Root()
	return Compiler_compile_Results(root.Struct()), err
}

func (s Compiler_compile_Results) String() string {
	str, _ := text.Marshal(0xb1485f6d015ee01b, capnp.Struct(s))
	return str
}

func (s Compiler_compile_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Compiler_compile_Results) DecodeFromPtr(p capnp.Ptr) Compiler_compile_Results {
	return Compiler_compile_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Compiler_compile_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Compiler_compile_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Compiler_compile_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Compiler_compile_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Compiler_compile_Results) Response() (CompilerResponse, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CompilerResponse(p.Struct()), err
}

func (s Compiler_compile_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Compiler_compile_Results) SetResponse(v CompilerResponse) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated CompilerResponse struct, preferring placement in s's segment.
func (s Compiler_compile_Results) NewResponse() (CompilerResponse, error) {
	ss, err := NewCompilerResponse(capnp.Struct(s).Segment())
	if err != nil {
		return CompilerResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Compiler_compile_Results_List is a list of Compiler_compile_Results.
type Compiler_compile_Results_List = capnp.StructList[Compiler_compile_Results]

// NewCompiler_compile_Results creates a new list of Compiler_compile_Results.
func NewCompiler_compile_Results_List(s *capnp.Segment, sz int32) (Compiler_compile_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Compiler_compile_Results](l), err
}

// Compiler_compile_Results_Future is a wrapper for a Compiler_compile_Results promised by a client call.
type Compiler_compile_Results_Future struct{ *capnp.Future }

func (f Compiler_compile_Results_Future) Struct() (Compiler_compile_Results, error) {
	p, err := f.Future.Ptr()
	return Compiler_compile_Results(p.Struct()), err
}
func (p Compiler_compile_Results_Future) Response() CompilerResponse_Future {
	return CompilerResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_cf0367ee3bec7bc8 = "x\xdat\x92\xcfk\x13_\x14\xc5\xcf\xb9o\xf2M\xbf" +
	"\x90a:N\x16\x05\x17E\x88b\x04\x8b!\x82\x10\x85" +
	"\x96\xd6P\xd1\x0ay\xd1BU\xfc1\x861\x04\xf2\xab" +
	"o\x12ED\xa4\x08]\xb8\x10\\\xeb\xde\xa5\xb8r)" +
	"t\xa1\xee\xfc\x03D\xf4\x0f\x107n\xdc\xe8\x93I\x93" +
	"I\x15\xdd\xcd\xbcw\xee\xb9\x9f{\xcf\x9b\xfd\xbe\xe4\x94" +
	"\xdcy\x05\xd1\x85\xcc\x7fV?_=T\xdf|\xf3\x10" +
	"\xda#\xed\xbb{_N~m\xaa\xf7\xa82\xab\x80\xf2" +
	"\x90\xc2`\x8bY \xb8\xcf\x17\xa0-T\x1e\x9d\xfb\xb0" +
	"\xfdt\x1b\xbe'S5\x18\x1c\x90\x9d\xa0(\x89\xf0\xa0" +
	"\x9c\x00\xed\xfe\xcf\xd7\xd8\xb9~\xe6%\xfc9\x02\x99\xc4" +
	"\xa2\\\x94e\x82AI\x16A\xfb\xf8\xf6\x95\xfa\xb7g" +
	"\x9f^\xc1\xf7\xd4oN\xeb\xb2\x13\\\x1d9]\x92\xd5" +
	"`+\xf9\xb2O>\xbe-\xe7\xf3\x1b\xaf\xa1\xe7\x98\xda" +
	"\xb5\xa4\x92\xd8m\xca\x1d\x1c\xb5\x8d^\xa7\xdfjGF" +
	"-4\xc2~\xb7_Y\x19\xff\xd7\xa3\xb8\xdf\xeb\xc6\x11" +
	"j\xa4\xce)'g\xadC\xc0\xaf\xde\x04\xf4iE]" +
	"\x13\xba\xfci\xf3\x89\xaf\x7f\xde\x00zMQo\x08]" +
	"\xf9a\xf3\x14\xc0_O\xb4\x17\x15\xf5\x0d\xa1\xbd\xd5j" +
	"G+\xbd\xee\x00\xd9\xa8;\xa0\x0b\xa1\x0b\xa6\xed1_" +
	"5\xa6g\x98\x830\x07\xda\xf8n<\x88:U\x83\xec" +
	"\xde\xd3\x89Z\xc6\xb0ka\xb79\x0c\x9b\xbb\x903\xa3" +
	"\x9e\xfe>\x80\xf4\xff?\x02\xb0\xe1\x99a<H\xab\x9c" +
	"?F\\\x18_\x14\xeaQ<l\x0fbhG9\xc0" +
	"hL\xf7,\xa0s\x8azNh\xcdd\x17\x00g\xa7" +
	"\xc9\x83\x9c\xfd\x0b\xd4\xc4~\x04\xe5\xa8\xcc\x9e\x188I" +
	"\xd7\xf7\x97!~&\xfb`\\\xbc\xc4\x1a\xf9\xcf,R" +
	"\xd0\xc5Zh\xc2N\xacgR\xce\xe2e@\x1fV\xd4" +
	"\xc7\x85\xe4n\x18\xa5\x84\xfd\x98\xa2>%\xb4}\xd3k" +
	"\x9a\xb0s\x01\xca4\xd2=\xb6'{\x03\xe8M\xdf&" +
	"H\x0f\xfc\x15\x00\x00\xff\xff\xa9\xb1\xc4\x8f"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_cf0367ee3bec7bc8,
		Nodes: []uint64{
			0x83c671522647a751,
			0x869b86db4b8a3a24,
			0xb1485f6d015ee01b,
			0xb7df9cf3525b768e,
			0xbf58141433c7dd91,
		},
		Compressed: true,
	})
}
